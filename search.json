[{"title":"第一次开车回家","url":"/blog/生活/第一次开车回家/","content":"\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/27.jpg\" width=\"40%\" height=\"40%\">\n\n去年春节前的武汉很冷 🥶，伴随而来的还有百年难得一遇的冻雨 🌨️，而我却准备在这最困难的时候，开车从武汉回家 🚗。现在回想起来，也是一段非常奇妙的旅程，所以想着把这段经历记录一下。\n\n<!-- more -->\n\n---\n\n大年廿三晚上和土哥参加完实验室年终聚会回到家，发现楼下电动车上已经裹上了薄薄的一层冰，天上也持续地下着小雨。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/1.jpg\" width=\"40%\" height=\"40%\">\n\n不出所料，第二天整个武汉便被冰层覆盖，公司附近的树被压断了不少。当时看了下最近几天的天气预报，只有大年廿六天气稍好，遂决定廿六号离开武汉。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/13.jpg\" width=\"40%\" height=\"40%\">\n\n原计划开两天车回家，第一天冒着冻雨开到荆州，第二天从荆州开回家（彭水），但计划总是赶不上变化...\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/16.jpg\" width=\"20%\" height=\"20%\">\n\n### 🗓️ 大年廿六\n\n下午两点在保利充满电，没想到仅出武汉就花了三小时。上高速后走走停停，天色逐渐暗了下来，快到仙桃服务区的时候，终于堵住不动了。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/17.jpg\" width=\"40%\" height=\"40%\">\n\n道路两侧积了很厚的雪，天上也开始零星下起了小雪，这个时候拿出了我在楼下买的的烤馍和泡面，以及出发前烧好的开水，准备吃个晚饭。不过没想到水温不够，泡不开泡面...\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/19.jpg\" width=\"40%\" height=\"40%\">\n\n又等了一会，快到 9 点了，还堵在路上，不得已把车开到了仙桃服务区，顺便在服务区吃了晚饭。仙桃服务区很大，环境也很好，想着后面一定要带琦姐来一次。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/18.jpg\" width=\"40%\" height=\"40%\">\n\n没想到第一天是在仙桃服务区度过的，离目标荆州还有好几个小时的路程呢，不过还好小特的空调很给力，在驾驶位安稳地睡了一觉。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/35.jpg\" width=\"20%\" height=\"20%\">\n\n### 🗓️ 大年廿七\n\n今天起了个大早，车外还是零星地下着小雪，但已经是白茫茫的一片，在服务区吃了个早饭，顺便把车的电充满了，满血出发，今天的目标是宜昌！\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/22.jpg\" width=\"40%\" height=\"40%\">\n\n刚出服务区，导航显示前方有些拥堵，等一会发现只是有两辆龟速车在缓慢前行，超过他们后又往前开了一会，这时导航显示前方非常拥堵。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/23.jpg\" width=\"20%\" height=\"20%\">\n\n果然没过一会彻底堵住了，能看到前方大概 500 米处有凿冰的车在以 10km/h 的速度开路，就这样一直堵到了中午，车外的雪也越下越大。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/25.jpg\" width=\"40%\" height=\"40%\">\n\n好在又过了不久终于放行了，浩浩荡荡的车队就这样一直往前开，大概十分钟后整个车队居然被赶下了高速...高速封路了，只能走国道，国道的道路状况比高速更复杂，因为两侧积雪的缘故，原本的双车道只剩下一个车身宽度的车道可走，只能跟在大货车后面缓慢通行。\n\n出乎意料的是，国道的风景非常好，整个世界被白雪和云层覆盖，大地和天空交融在一块，是那种一望无际银装素裹的感觉。从仙桃到荆州，走了国道县道乡道，途径了很多乡镇，从热闹的氛围中已经能提前感受到年味，更加归心似箭了。\n\n> 只顾欣赏风景去了，没有想起拍照...\n\n进入荆州的时候一直很堵，查了一下才知道荆州是本次冻雨的重灾区，市区的积雪和我地盘差不多厚，一路上只能沿着前方车辆压过的车轱辘印行驶。途中还因为没有车轱辘印了，不得原路倒车，换了条路。好在运气不算很差，兜兜转转后还是从荆州收费站重新上了高速。（后面我和琦姐说，荆州那一段路我仿佛在越野...）\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/34.jpg\" width=\"40%\" height=\"40%\">\n\n从荆州去宜昌的路上，路边的积雪越来越少，路况也越来越好，很快便到了宜昌市。找桃子问了下宜昌比较适合吃的地方，决定今晚就在宜昌好好玩一下！\n\n### 🗓️ 大年廿七-晚\n\n桃子说「陶珠路」上美食很多，建议我去这边玩一下，于是我便来到「陶珠路」。这是一条非常热闹的街，路边有很多夜宵店，整条街都弥漫着火锅的香味，每个店门口都有一位负责拉客的服务员。\n\n听桃子建议找到了「北门老刘」，点了一份宜昌红油面和一份凉拌猪耳，感觉味道不错，就是油太重了，不是我喜欢吃的类型，喜欢吃襄阳牛肉面的朋友可以去尝试一下。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/29.jpg\" width=\"40%\" height=\"40%\">\n\n吃完晚饭，略感困倦，找了个能充电的酒店地下车库休息，今晚依旧住在车里，过年期间酒店的人很少，也很安静，今天就到此为止了，明天直接回家！\n\n### 🗓️ 大年廿八\n\n从宜昌市区到高速需要开很久，会爬很高的盘山公路，路过了不少弯弯绕绕的乡镇式道路，但不得不说，宜昌的风景真的很好，清晨的朝阳照在山间，雾气渐渐消散，是工作后难得一见的景色。\n\n> 总是会忘记拍照...\n\n今天的第一站要先到恩施充个电，宜昌到恩施的路上非常顺利，G50 高速路况很好，中午 11 点左右便到了恩施服务区，充个电吃个饭，继续出发 🚀。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/32.jpg\" width=\"20%\" height=\"20%\">\n\n恩施到彭水的路上隧道很多，雾气很重，每个山头 🏔️ 都萦绕着一团雾，有的雾气甚至笼罩了隧道口，视野很差，需要打开雾灯才能继续行驶。\n\n> 不过在听到「前方 2 公里，靠右下高速，往保家收费站方向」的时候，感觉这一路的艰辛都是值得的。\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/20240206/36.jpg\" width=\"32%\" height=\"32%\">\n\n从保家收费站往彭水城区开，经过了很多记忆中有些模糊的道路，想起小时候一个人在这条路上骑自行车 🚴 的场景，不得感叹人终究是会长大的。\n\n这趟「自驾游」开了三天，途径了很多城市，看到了很多平时见不到的风景，运气也很好，没有遇到因为冻雨堵车导致电量耗尽 🪫 的情况，最终平安回到家。\n","tags":["others"],"categories":["生活"]},{"title":"如何基于 TS 类型系统实现五子棋","url":"/blog/技术/如何基于-TS-类型系统实现五子棋/","content":"\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/fir/00.jpeg\" width=\"40%\" height=\"40%\">\n\nTypeScript 是一个类型系统，如何实现五子棋应用呢？这不得不提到 TypeScript 的类型系统其实是图灵完备的 🤓\n\n<!-- more -->\n\n# 能否实现\n\n## 什么是图灵完备\n\n> 图灵完备性是计算机科学中的一个概念，描述了一个系统在时间和资源充足的情况下，能够执行任何可以用算法表达的计算。这个概念以数学家阿兰·图灵的名字命名，图灵完备的系统能够模拟图灵机，后者是一个理论计算模型。这个特性对于编程语言至关重要，因为它意味着这些语言可以解决任何图灵机能够解决的问题，前提是没有内存或处理能力的限制。现代编程语言如 Python、Java 和 C++等都是图灵完备的例子。理解图灵完备性有助于评估不同编程范式的计算能力和局限性。\n\n## 证明 TS 是图灵完备的\n\n如果某个系统是图灵完备的，那么它一定能实现以下三个基础函数和三个基础操作\n\n**三个基础函数**\n常零函数：给定任意参数，返回值为零\n后继函数：给定参数 X，返回值为 X + 1\n映射函数：给定参数列表，返回指定位置的参数\n\n**三个基础操作**\n函数组合：将一个函数的返回值作为另一个函数的输入\n原始递归函数：实现递归函数，包含基础条件的判断和递归条件的判断\n极小化：找到某个函数返回值首次为 0 时的参数值\n可以看到证明某个系统是否是图灵完备的比较复杂，但如果它能实现任意「偏递归函数」，那么它一定是图灵完备的，一个典型的偏递归函数的例子是除法运算。\n\n**先上理论：**\n什么是「偏递归函数」：这不得不提到与之对应的「全递归函数」，「全递归函数」指对于一个原始递归函数，任意输入都有对应的输出，而「偏递归函数」不一定能得到输出结果。\n比如乘法是一个「全递归函数」，除法是一个「偏递归函数」（除数为 0 时无法输出结果）。这也就是为什么说能实现除法，系统就基本可以算是图灵完备了（当然这只是说「基本可以」，比如计算器可以实现除法，但它并不图灵完备）。\n\n<div align=\"center\"><img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/fir/01.svg\" width=\"80%\" height=\"80%\"></div>\n\n**实际操作一下，如何通过 TS 类型系统实现除法操作：**\n\n1. 定义三个基础方法和计算操作\n\n```typescript\nexport type 不可能 = never;\nexport type 是 = true;\nexport type 否 = false;\n\n// 1. 常零函数\nexport type 零 = {\n  是零吗: 是;\n};\n\nexport type 正数 = { 前一个数: 整数; 是零吗: 否 };\n\nexport type 整数 = 零 | 正数;\n\n// 2. 后继函数\nexport type 加一<T extends 整数> = {\n  前一个数: T;\n  是零吗: 否;\n};\n\n// 3. 投影函数，TS 自带，比如: type A_3_2<T1, T2, T3> = T2\n\n// 1. 函数组合，TS 自带，比如: type A = B<C<number>>\n// 2. 全递归函数，TS 可以通过 extends 语法实现条件判断和递归调用\n// 3. 极小化，TS 可以通过 extends 和 infer 语法判断计算结果是否为零\n```\n\n2. 实例化一些整数\n   其实 TS 通过 `type 三 = [1, 2, 3]['length']` 可以直接拿到数字类型，我们这里再原始一点，通过数据结构来定义\n\n```typescript\nexport type 一 = 加一<零>;\nexport type 二 = 加一<一>;\nexport type 三 = 加一<二>;\nexport type 四 = 加一<三>;\nexport type 五 = 加一<四>;\nexport type 六 = 加一<五>;\nexport type 七 = 加一<六>;\nexport type 八 = 加一<七>;\nexport type 九 = 加一<八>;\n```\n\n3. 定义基础的比较运算\n\n```typescript\nexport type 相等<\n  第一个数 extends 整数,\n  第二个数 extends 整数\n> = 第一个数 extends 零\n  ? 第二个数 extends 零\n    ? 是\n    : 否\n  : 第二个数 extends 零\n  ? 否\n  : 相等<减一<第一个数>, 减一<第二个数>>;\n\nexport type 不相等<第一个数 extends 整数, 第二个数 extends 整数> = 相等<\n  第一个数,\n  第二个数\n> extends 是\n  ? 否\n  : 是;\n\nexport type 大于<\n  第一个数 extends 整数,\n  第二个数 extends 整数\n> = 第一个数 extends 零\n  ? 否\n  : 第二个数 extends 零\n  ? 是\n  : 大于<减一<第一个数>, 减一<第二个数>>;\n\nexport type 小于<\n  第一个数 extends 整数,\n  第二个数 extends 整数\n> = 第一个数 extends 零\n  ? 第二个数 extends 零\n    ? 否\n    : 是\n  : 第二个数 extends 零\n  ? 否\n  : 小于<减一<第一个数>, 减一<第二个数>>;\n\nexport type 大于等于<\n  第一个数 extends 整数,\n  第二个数 extends 整数\n> = 是 extends 相等<第一个数, 第二个数> ? 是 : 大于<第一个数, 第二个数>;\n\nexport type 小于等于<\n  第一个数 extends 整数,\n  第二个数 extends 整数\n> = 是 extends 相等<第一个数, 第二个数> ? 是 : 小于<第一个数, 第二个数>;\n```\n\n4. 定义加、减、乘。这三个函数都是全递归函数\n\n```typescript\nexport type 加法<数字一 extends 整数, 数字二 extends 整数> = 数字二 extends 零\n  ? 数字一\n  : 加法<加一<数字一>, 减一<数字二>>;\n\nexport type 减法<数字一 extends 整数, 数字二 extends 整数> = 数字二 extends 零\n  ? 数字一\n  : 减法<减一<数字一>, 减一<数字二>>;\n\nexport type 乘法<数字一 extends 整数, 数字二 extends 整数> = 数字二 extends 零\n  ? 零\n  : 加法<数字一, 乘法<数字一, 减一<数字二>>>;\n```\n\n5. 定义除法。可以看到除法的定义和减法的定义几乎一致，但通过后面的测试用例我们可以看到当除数为 0 时，代码会陷入计算的死循环中，这也是偏递归函数相比于全递归函数不同的地方\n\n```typescript\nexport type 除法<\n  数字一 extends 整数,\n  数字二 extends 整数,\n  结果 extends 整数 = 零\n> = 是 extends 小于等于<数字一, 数字二>\n  ? 结果\n  : 除法<减法<数字一, 数字二>, 数字二, 加一<结果>>;\n```\n\n6. 测试用例\n\n```typescript\ntype Case1 = 相等<加法<一, 一>, 二>; // true\ntype Case2 = 相等<减法<五, 三>, 二>; // true\ntype Case3 = 相等<乘法<三, 三>, 九>; // true\ntype Case4 = 相等<除法<八, 三>, 二>; // true\n// @ts-expect-error\ntype Case5 = 相等<除法<八, 零>, 二>; // Type instantiation is excessively deep and possibly infinite.(2589)\n```\n\n> 完整代码见 TypeScript Playground\n\n## 图灵完备能做什么\n\n正如图灵完备的定义，如果一个系统是图灵完备的，那么它可以用来解决任何可计算的问题\n\n**可计算问题**：是否存在一个算法，能解决在任何输入下的此计算问题，如果存在，这个问题便是可计算的\n一个不可计算问题的例子（判断某个函数是否死循环）：\n\n> 停机问题：给定一段程序的描述和该程序的一个有效输入，运行此程序，那么程序最终是会终止，还是会死循环下去？\n\n显然，五子棋程序是一个可计算问题：无论是用户落子后应该如何渲染，还是用户落子后对局是否结束，都是能够被计算的\n理论成立，开始实现 🧑‍💻\n\n# 怎么实现\n\n我们不难发现五子棋其实就是一个**二维链表**，链表的每一项是一个棋子或者为空，每落一子便得到一个新的二维链表。\n那么通过 TS 类型系统实现五子棋这个问题便转化为了如何通过 TS 类型系统表示一个二维链表类型，并实现基于当前的二维链表和落子位置，推导出新的二维链表类型，最后基于二维链表类型实现棋盘渲染和胜负判定\n\n<div align=\"center\"><img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/fir/02.svg\" width=\"80%\" height=\"80%\"></div>\n\n## 定义棋子\n\n棋子类型能够区分黑白即可\n\n> 大多数 TS 编辑器都是偏黑色或偏白色，所以这里使用红绿作为棋子颜色\n\n```typescript\ntype 黑色符号 = \"🔴\";\ntype 白色符号 = \"🟢\";\n\ntype 黑色 = \"黑\";\ntype 白色 = \"白\";\n\ntype 颜色 = 黑色 | 白色;\n\ntype 棋子<T extends 颜色> = {\n  符号: T extends 黑色 ? 黑色符号 : 白色符号;\n};\n```\n\n## 定义棋盘\n\n棋盘是一个以棋盘格为单元组成的二维链表，链表的第一个纬度可表示棋盘的一行，那么我们可以先定义出棋盘格，再定义棋盘行，最后定义出棋盘\n\n### 定义棋盘格\n\n棋盘格需要有**坐标信息**和当前位置**棋子**的信息\n对于坐标，可以使用上文中已经定义出的整数类型实现\n\n```typescript\ntype 棋子横坐标 = 一 | 二 | 三 | 四 | 五 | 六 | 七 | 八 | 九;\ntype 棋子纵坐标 = 一 | 二 | 三 | 四 | 五 | 六 | 七 | 八 | 九;\n\ntype 棋子坐标 = {\n  横: 棋子横坐标;\n  纵: 棋子纵坐标;\n};\n```\n\n进一步得到棋盘格的定义\n\n```typescript\nexport type 棋盘格 = {\n  内容: 棋子<颜色> | 空;\n  上一格: 棋盘格 | 空;\n  下一格: 棋盘格 | 空;\n};\n```\n\n可以看到这里定义棋盘格时便声明了**双向链表结构**，每一个棋盘格都记录着它前后棋盘格的引用，便于后续的胜负判定\n\n### 定义棋盘行\n\n棋盘行的定义和棋盘格类似\n\n```typescript\nexport type 棋盘行 = {\n  内容: 棋盘格;\n  上一行: 棋盘行 | 空;\n  下一行: 棋盘行 | 空;\n};\n```\n\n### 定义整个棋盘\n\n棋盘的定义也是依葫芦画瓢\n\n```typescript\nexport type 棋盘 = {\n  内容: 棋盘行;\n  待落颜色: 颜色;\n  结果: 空 | 颜色;\n};\n```\n\n我在定义棋盘时同时定义了当前待落子的颜色信息和当前结果，便于后续渲染棋盘时提示该哪一方落子以及对局是否结束\n\n## 构造棋盘\n\n棋盘的构造也就是通过参数生成棋盘类型，类似的棋盘行和棋盘格也需要构造，以构造棋盘格为例：\n\n```typescript\nexport type 构造棋盘格参数 = {\n  内容: 棋盘格[\"内容\"];\n};\n\nexport type 构造棋盘格<\n  T extends 构造棋盘格参数,\n  P extends 棋盘格[\"上一格\"],\n  K extends 棋盘格[\"下一格\"]\n> = {\n  内容: T[\"内容\"];\n  上一格: P;\n  下一格: K;\n};\n```\n\n构造棋盘行的方法类似，这里省略，我们直接看棋盘是如何构造的\n\n```typescript\nexport type 构造棋盘参数 = {\n  内容: 棋盘行;\n};\n\nexport type 构造棋盘<\n  T extends 构造棋盘参数,\n  P extends 颜色,\n  K extends 空 | 颜色\n> = {\n  内容: T[\"内容\"];\n  待落颜色: P;\n  结果: K;\n};\n```\n\n如何构造五子棋盘呢，以 9\\*9 的棋盘为例，我们可以先定义棋盘格，由棋盘格构造棋盘行，由棋盘行得到目标棋盘\n\n> 这里没有使用递归构造，TS 有最大递归次数限制；如果在这里使用递归构造，后面计算结果时会突破上限\n\n```typescript\ntype 构造五子棋棋盘行参数 = [\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数,\n  构造棋盘格参数\n];\n\ntype 构造五子棋棋盘行<\n  T extends 构造五子棋棋盘行参数,\n  P extends 棋盘行[\"下一行\"]\n> = T extends [\n  infer 第一格 extends 构造棋盘格参数,\n  infer 第二格 extends 构造棋盘格参数,\n  infer 第三格 extends 构造棋盘格参数,\n  infer 第四格 extends 构造棋盘格参数,\n  infer 第五格 extends 构造棋盘格参数,\n  infer 第六格 extends 构造棋盘格参数,\n  infer 第七格 extends 构造棋盘格参数,\n  infer 第八格 extends 构造棋盘格参数,\n  infer 第九格 extends 构造棋盘格参数\n]\n  ? 构造棋盘行<\n      {\n        内容: 构造棋盘格<\n          第一格,\n          空,\n          构造棋盘格<\n            第二格,\n            空,\n            构造棋盘格<\n              第三格,\n              空,\n              构造棋盘格<\n                第四格,\n                空,\n                构造棋盘格<\n                  第五格,\n                  空,\n                  构造棋盘格<\n                    第六格,\n                    空,\n                    构造棋盘格<\n                      第七格,\n                      空,\n                      构造棋盘格<第八格, 空, 构造棋盘格<第九格, 空, 空>>\n                    >\n                  >\n                >\n              >\n            >\n          >\n        >;\n      },\n      空,\n      P\n    >\n  : 不可能;\n\ntype 构造五子棋棋盘参数 = [\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数,\n  构造五子棋棋盘行参数\n];\n\ntype 构造五子棋棋盘<T extends 构造五子棋棋盘参数> = T extends [\n  infer 第一行 extends 构造五子棋棋盘行参数,\n  infer 第二行 extends 构造五子棋棋盘行参数,\n  infer 第三行 extends 构造五子棋棋盘行参数,\n  infer 第四行 extends 构造五子棋棋盘行参数,\n  infer 第五行 extends 构造五子棋棋盘行参数,\n  infer 第六行 extends 构造五子棋棋盘行参数,\n  infer 第七行 extends 构造五子棋棋盘行参数,\n  infer 第八行 extends 构造五子棋棋盘行参数,\n  infer 第九行 extends 构造五子棋棋盘行参数\n]\n  ? 构造棋盘<\n      {\n        内容: 构造五子棋棋盘行<\n          第一行,\n          构造五子棋棋盘行<\n            第二行,\n            构造五子棋棋盘行<\n              第三行,\n              构造五子棋棋盘行<\n                第四行,\n                构造五子棋棋盘行<\n                  第五行,\n                  构造五子棋棋盘行<\n                    第六行,\n                    构造五子棋棋盘行<\n                      第七行,\n                      构造五子棋棋盘行<第八行, 构造五子棋棋盘行<第九行, 空>>\n                    >\n                  >\n                >\n              >\n            >\n          >\n        >;\n      },\n      \"黑\",\n      空,\n      否\n    >\n  : 不可能;\n```\n\n## 落子后生成新棋盘\n\n每落一子都需要生成一个新的棋盘，也就是说落子是基于当前棋盘和落子信息生成新的棋盘的函数。\n基本原理就是通过落子参数，替换掉当前棋盘的某一个棋盘格后，生成新的棋盘\n\n```typescript\nexport type 落子<\n  某棋盘 extends 棋盘,\n  某坐标 extends 棋子坐标,\n  某颜色 extends 颜色\n> = 获取棋盘某位置的单元<某棋盘, 某坐标> extends infer 当前格\n  ? 当前格 extends 棋盘格\n    ? 当前格[\"内容\"] extends 空\n      ? 获取棋盘指定行<某棋盘, 某坐标[\"纵\"]> extends infer 当前行\n        ? 当前行 extends 棋盘行\n          ? 替换棋盘某行<\n              某棋盘,\n              某坐标[\"纵\"],\n              从内容构造棋盘行<\n                替换棋盘行某格<当前行, 某坐标[\"横\"], 棋子<某颜色>>,\n                当前行[\"上一行\"],\n                当前行[\"下一行\"]\n              >\n            > extends infer 某棋盘内容\n            ? 某棋盘内容 extends 棋盘[\"内容\"]\n              ? 构造棋盘<\n                  {\n                    内容: 某棋盘内容;\n                  },\n                  某棋盘[\"待落颜色\"] extends \"黑\" ? \"白\" : \"黑\",\n                  计算结果<某棋盘内容>\n                >\n              : 不可能\n            : 不可能\n          : 不可能\n        : 不可能\n      : 错误\n    : 不可能\n  : 不可能;\n```\n\n## 计算结果\n\n计算结果的大概原理是遍历每一个棋盘格，计算其各方向同色子的个数是否达到五个，因为是每个棋子都计算一遍，所以只需要「向前遍历」即可\n\n```typescript\ntype 获胜方向 = \"横行\" | \"纵向\" | \"正斜\" | \"反斜\";\n\ntype 根据方向获取下一坐标<\n  当前坐标 extends 棋子坐标,\n  方向 extends 获胜方向\n> = 方向 extends \"横行\"\n  ? 构造棋子坐标<加一<当前坐标[\"横\"]>, 当前坐标[\"纵\"]>\n  : 方向 extends \"纵向\"\n  ? 构造棋子坐标<当前坐标[\"横\"], 加一<当前坐标[\"纵\"]>>\n  : 方向 extends \"正斜\"\n  ? 构造棋子坐标<加一<当前坐标[\"横\"]>, 加一<当前坐标[\"纵\"]>>\n  : 方向 extends \"反斜\"\n  ? 构造棋子坐标<减一<当前坐标[\"横\"]>, 加一<当前坐标[\"纵\"]>>\n  : 不可能;\n\ntype 某向是否胜利<\n  方向 extends 获胜方向,\n  某棋盘内容 extends 棋盘[\"内容\"],\n  某坐标 extends 棋子坐标 | 空,\n  某棋盘格 extends 棋盘格 | 空,\n  某颜色 extends 颜色,\n  胜利所需个数 extends 三 | 五,\n  迭代次数 extends 正数 = 一\n> = 某棋盘格 extends 棋盘格\n  ? 某坐标 extends 棋子坐标\n    ? 某棋盘格[\"内容\"] extends 棋子<某颜色>\n      ? 是 extends 相等<迭代次数, 胜利所需个数>\n        ? 是\n        : 根据方向获取下一坐标<某坐标, 方向> extends infer 下一坐标\n        ? 某向是否胜利<\n            方向,\n            某棋盘内容,\n            下一坐标 extends 棋子坐标 ? 下一坐标 : 空,\n            下一坐标 extends 棋子坐标\n              ? 根据棋盘内容获取棋盘某位置的单元<某棋盘内容, 下一坐标>\n              : 空,\n            某颜色,\n            胜利所需个数,\n            加一<迭代次数>\n          >\n        : 不可能\n      : 否\n    : 否\n  : 否;\n\ntype 是否胜利<\n  某方向 extends 获胜方向,\n  某棋盘内容 extends 棋盘[\"内容\"],\n  某坐标 extends 棋子坐标,\n  某棋盘格 extends 棋盘格,\n  某颜色 extends 颜色,\n  胜利所需个数 extends 三 | 五\n> = 某方向 extends 获胜方向\n  ? 某向是否胜利<某方向, 某棋盘内容, 某坐标, 某棋盘格, 某颜色, 胜利所需个数>\n  : 不可能;\n\n// e.g. type 结果 = 是否胜利<获胜方向, ...> = 某向是否胜利<\"横行\", ...> | 某向是否胜利<\"纵向\", ...> | 某向是否胜利<\"正斜\", ...> | 某向是否胜利<\"反斜\", ...>\n```\n\n> 写到这里时突然想到五子棋的逻辑比较简单，其实只计算最后落子位置八个方向是否胜利即可，这样稍微麻烦的地方在于计算时不仅需要「向前遍历」，还需要「向后遍历」\n\n## 渲染棋盘\n\n对于不同的语言和不同的执行环境，渲染方式往往不一样，比如 HTML 的渲染是通过 DOM 和 CSSOM 在浏览器画布中实现的、命令行的渲染是通过普通字符和控制字符在终端实现的。TS 的渲染类似，可以借助于类型提示将字符渲染到 IDE 的提示弹窗里，就像这样：\n\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/fir/03.png\" width=\"40%\" height=\"40%\">\n\n那么我们只需要实现一个渲染棋盘的类型，将棋盘作为参数即可\n\n> 其中用到了 TS 模版字符串的能力，这是 TS 能够展示多样化信息的关键，也是一个很强大的功能\n\n```typescript\nexport type 空符号 = \"➕\";\nexport type 元符号 = \"💲\";\n\ntype 五子棋元坐标 =\n  | 构造棋子坐标<三, 三>\n  | 构造棋子坐标<三, 七>\n  | 构造棋子坐标<五, 五>\n  | 构造棋子坐标<七, 三>\n  | 构造棋子坐标<七, 七>;\n\nexport type 渲染空格<\n  纵坐标 extends 棋子纵坐标,\n  横坐标 extends 棋子横坐标,\n  元坐标 extends 棋子坐标\n> = 构造棋子坐标<横坐标, 纵坐标> extends 元坐标 ? 元符号 : 空符号;\n\nexport type 渲染格<\n  某格 extends 棋盘格,\n  纵坐标 extends 棋子纵坐标,\n  横坐标 extends 棋子横坐标,\n  元坐标 extends 棋子坐标\n> = 某格[\"内容\"] extends infer 待渲染棋子\n  ? 待渲染棋子 extends 棋子<颜色>\n    ? 待渲染棋子 extends 棋子<黑色>\n      ? 棋子<黑色>[\"符号\"]\n      : 棋子<白色>[\"符号\"]\n    : 待渲染棋子 extends 空\n    ? 渲染空格<横坐标, 纵坐标, 元坐标>\n    : 不可能\n  : 不可能;\n\nexport type 拼接单元格<\n  迭代结果 extends string,\n  当前结果 extends string\n> = 迭代结果 extends \"\" ? 当前结果 : `${迭代结果} ${当前结果}`;\n\nexport type 渲染行内容<\n  某格 extends 棋盘格 | 空,\n  元坐标 extends 棋子坐标,\n  纵坐标 extends 棋子纵坐标,\n  迭代结果 extends string = \"\",\n  迭代号 extends 整数 = 最小横坐标\n> = 某格 extends infer 当前格\n  ? 迭代号 extends infer 横坐标\n    ? 当前格 extends 棋盘格\n      ? 横坐标 extends 棋子横坐标\n        ? 渲染行内容<\n            当前格[\"下一格\"],\n            元坐标,\n            纵坐标,\n            拼接单元格<迭代结果, 渲染格<当前格, 纵坐标, 横坐标, 元坐标>>,\n            加一<迭代号>\n          >\n        : 迭代结果\n      : 当前格 extends 空\n      ? 迭代结果\n      : 不可能\n    : 不可能\n  : 不可能;\n\nexport type 渲染五子棋盘<某棋盘 extends 棋盘> = {\n  [key in\n    | \"一\"\n    | \"二\"\n    | \"三\"\n    | \"四\"\n    | \"五\"\n    | \"六\"\n    | \"七\"\n    | \"八\"\n    | \"九\"]: key extends infer 行\n    ? 行 extends \"上\"\n      ? \" ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽ \"\n      : 行 extends \"下\"\n      ? \" ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺ \"\n      : 行 extends keyof 正数键值对\n      ? 获取棋盘指定行<某棋盘, 正数键值对[行]> extends infer 某行\n        ? 某行 extends 棋盘行\n          ? `⎪ ${渲染行内容<某行[\"内容\"], 五子棋元坐标, 正数键值对[行]>} ⎪`\n          : 不可能\n        : 不可能\n      : 不可能\n    : 不可能;\n};\n```\n\n# 看看效果\n\n## 落子和渲染\n\n```typescript\nimport { 初始五子棋盘, 渲染五子棋盘, 落子 } from \"./src\";\n\ntype 初始结果 = 渲染五子棋盘<初始五子棋盘>;\n\ntype 黑第一步 = 落子<初始五子棋盘, \"黑\", \"二\", \"三\">;\ntype 黑第一步结果 = 渲染五子棋盘<黑第一步>;\n\ntype 白第一步 = 落子<黑第一步, \"白\", \"三\", \"三\">;\ntype 白第一步结果 = 渲染五子棋盘<白第一步>;\n\ntype 黑第二步 = 落子<白第一步, \"黑\", \"三\", \"四\">;\ntype 黑第二步结果 = 渲染五子棋盘<黑第二步>;\n```\n\n|                                         初始棋盘                                         |                                   黑棋第一步 (二, 三)                                    |\n| :--------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------: |\n|  ![初始棋盘.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/04-1.png)  | ![黑棋第一步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/04-2.png) |\n|                                   白棋第一步 (三, 三)                                    |                                   黑棋第二步 (三, 四)                                    |\n| ![白棋第一步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/04-3.png) | ![黑棋第二步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/04-4.png) |\n\n## 计算结果\n\n> 「五子棋」计算结果时递归次数会超出 ts 限制，这里以「井字棋」为例\n\n```typescript\nimport { 初始井字棋盘, 渲染井字棋盘, 落子 } from \"./src\";\n\ntype 初始结果 = 渲染井字棋盘<初始井字棋盘>;\n\ntype 黑第一步 = 落子<初始井字棋盘, \"黑\", \"一\", \"一\">;\ntype 黑第一步结果 = 渲染井字棋盘<黑第一步>;\n\ntype 白第一步 = 落子<黑第一步, \"白\", \"三\", \"一\">;\ntype 白第一步结果 = 渲染井字棋盘<白第一步>;\n\ntype 黑第二步 = 落子<白第一步, \"黑\", \"二\", \"二\">;\ntype 黑第二步结果 = 渲染井字棋盘<黑第二步>;\n\ntype 白第二步 = 落子<黑第二步, \"白\", \"三\", \"二\">;\ntype 白第二步结果 = 渲染井字棋盘<白第二步>;\n\ntype 黑第三步 = 落子<白第二步, \"黑\", \"三\", \"三\">;\ntype 黑第三步结果 = 渲染井字棋盘<黑第三步>;\n// => {\n//   一: \"⎪ 🔴 ➕ 🟢 ⎪\";\n//   二: \"⎪ ➕ 🔴 🟢 ⎪\";\n//   三: \"⎪ ➕ ➕ 🔴 ⎪\";\n//   获胜: \"黑-🔴\";\n// }\n\ntype 重复落子 = 落子<白第一步, \"黑\", \"三\", \"一\">;\n// @ts-expect-error 重复落子: { 出错: \"原因: 当前位置「三, 一」已有棋子「🟢」\"; }\ntype 重复落子结果 = 渲染井字棋盘<重复落子>;\n\ntype 不能继续落子 = 落子<黑第三步, \"白\", \"二\", \"三\">;\n// @ts-expect-error 不能继续落子: { 出错: \"原因: 不能落子，「黑-🔴」已获胜\"; }\ntype 不能继续落子结果 = 渲染井字棋盘<不能继续落子>;\n```\n\n|                                         初始棋盘                                         |                                   黑棋第一步 (一, 一)                                    |                                   白棋第一步 (三, 一)                                    |\n| :--------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------: |\n|  ![初始棋盘.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/05-1.png)  | ![黑棋第一步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/05-2.png) | ![白棋第一步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/05-3.png) |\n|                                   黑棋第二步 (二, 二)                                    |                                   白棋第二步 (三, 二)                                    |                                   黑棋第三步 (三, 三)                                    |\n| ![黑棋第二步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/05-4.png) | ![白棋第二步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/05-5.png) | ![黑棋第三步.png](http://home.cs-tao.cc/github-content/contents/blog/image/fir/05-6.png) |\n\n# 相关链接\n\n- 源代码：[GitHub](https://github.com/CS-Tao/ts-fir)\n- 在线体验：[TypeScript Playground](https://www.typescriptlang.org/play?#)\n- 参考项目：[用 TypeScript 类型系统写的中国象棋](https://github.com/chinese-chess-everywhere/type-chess)\n","tags":["typescript"],"categories":["技术"]},{"title":"使用 git bisect 二分法快速定位问题","url":"/blog/技术/git-bisect-二分法快速定位问题/","content":"\n<img src=\"http://home.cs-tao.cc/github-content/contents/blog/image/git-bisect.jpeg?1\" width=\"36%\" height=\"36%\">\n\n最近作为「内包」支援公司内的另一个项目，需要和另一个团队的同事们合作，不熟悉他们的项目，在经过两周的合作后，某个不常用的页面终于打不开了。\n\n这个时候我们便可以使用 git 自带的二分查找工具 `git bisect` 来快速定位出问题的提交，找相关人员排查问题。\n\n<!-- more -->\n\n`git bisect` 最常用的命令有如下三个：\n\n```bash\n# 开始(重置)二分查找流程\n❯ git bisect start\n\n# 标记当前(或指定)提交为有问题的提交\n❯ git bisect bad [<rev>]\n\n# 标记当前(或指定)提交为正常的提交\n❯ git bisect good [<rev>]\n```\n\n下面先记录我是如何用这三个命令快速定位问题的，然后会介绍一下 bisect 其它命令和其使用场景。\n\n## 问题定位\n\n1. 首先使用你熟悉的 git 工具查看一下提交历史，我使用的是 [tig](https://github.com/jonas/tig)，提交历史如下\n\n   ```bash\n   o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   M─┐ Merge branch '********' into '********'\n   │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********\n   o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n   o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n1. 接下来执行 `git bisect start` 命令，进入二分查找模式，并标记最新的提交为有问题的提交\n\n   ```bash\n   ❯ git bisect start\n   status: waiting for both good and bad commits\n\n   ❯ git bisect bad\n   status: waiting for good commit(s), bad commit known\n   ```\n\n1. 根据提示，接下来我们需要标记正常的提交。我们审视一下上面的提交历史，可以发现 `[ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'` 看起来是上次发布上线的版本，我们切到这个提交上测试一下\n\n   ```bash\n   ❯ git checkout ee62949cc48a5f60b16ef5fa62d0418ee36ac855\n   Note: switching to 'ee62949cc48a5f60b16ef5fa62d0418ee36ac855'\n   ```\n\n   发现页面能正常打开，所以我们可以标记此提交是正常的\n\n   ```bash\n   ❯ git bisect good\n   Bisecting: 10 revisions left to test after this (roughly 3 steps)\n   [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ```\n\n   此时的提交历史检视结果如下（同时可以关注到 git 已经自动切换到了 `79a20e29636178e33479ec35cd23101b4080a6aa` 提交）\n\n   ```bash\n   ❌ o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   ❔ M─┐ Merge branch '********' into '********'\n   ❔ │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   ❔ o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   ❔ o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   ❔ o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   ❔ o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********nv\n   ❔ o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   ❔ o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   ❔ o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   ❔ o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ❔ o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n   ❔ o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   ❔ o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   ❔ o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   ❔ o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   ❔ o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   ❔ o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   ❔ o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   ❔ o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   ✅ M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n   继续检查当前提交是否正常，如果正常，则执行 `git bisect good`，如果不正常，则执行 `git bisect bad`，直至找到首个有问题的提交。\n\n   > 每次检查当前提交是否正常之前需要执行一些准备命令确保外部依赖被正确安装。比如前端项目中一般需要执行 `npm install` 命令来更新依赖\n\n1. 对当前提交 `79a20e29636178e33479ec35cd23101b4080a6aa` 进行测试，标记当前提交是有问题的\n\n   ```bash\n   ❯ git bisect bad\n   Bisecting: 4 revisions left to test after this (roughly 2 steps)\n   [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n\n   # 查找结果\n   ❌ o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   ❌ M─┐ Merge branch '********' into '********'\n   ❌ │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   ❌ o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   ❌ o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   ❌ o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   ❌ o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********\n   ❌ o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   ❌ o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   ❌ o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   ❌ o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ❔ o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n   ❔ o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   ❔ o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   ❔ o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   ❔ o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   ❔ o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   ❔ o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   ❔ o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   ❔ o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   ✅ M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n   命令执行后，git 自动切换到了 `f11d08852b7fb0ef7e9d16056280edac5a772d57` 提交。\n\n1. 对当前提交 `f11d08852b7fb0ef7e9d16056280edac5a772d57` 进行测试，标记当前提交是正常的\n\n   ```bash\n   ❯ git bisect good\n   Bisecting: 2 revisions left to test after this (roughly 1 step)\n   [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n\n   # 查找结果\n   ❌ o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   ❌ M─┐ Merge branch '********' into '********'\n   ❌ │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   ❌ o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   ❌ o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   ❌ o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   ❌ o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********\n   ❌ o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   ❌ o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   ❌ o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   ❌ o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ❔ o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n   ❔ o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   ❔ o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   ❔ o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   ✅ o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   ✅ o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   ✅ o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   ✅ o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   ✅ o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   ✅ M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n   命令执行后，git 自动切换到了 `782c1fa6852522d5db16cfff88c7051c2ac0bf09` 提交。\n\n1. 对当前提交 `782c1fa6852522d5db16cfff88c7051c2ac0bf09` 进行测试，标记当前提交是正常的\n\n   ```bash\n   ❯ git bisect good\n   Bisecting: 0 revisions left to test after this (roughly 1 step)\n   [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n\n   # 查找结果\n   ❌ o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   ❌ M─┐ Merge branch '********' into '********'\n   ❌ │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   ❌ o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   ❌ o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   ❌ o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   ❌ o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********\n   ❌ o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   ❌ o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   ❌ o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   ❌ o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ❔ o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n   ❔ o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   ✅ o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   ✅ o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   ✅ o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   ✅ o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   ✅ o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   ✅ o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   ✅ o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   ✅ M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n   命令执行后，git 自动切换到了 `fbdc27d4498e4d27828e8b7037d68c73f272878d` 提交。\n\n1. 对当前提交 `fbdc27d4498e4d27828e8b7037d68c73f272878d` 进行测试，标记当前提交是有问题的\n\n   ```bash\n   ❯ git bisect bad\n   Bisecting: 0 revisions left to test after this (roughly 0 steps)\n   [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n\n   # 查找结果\n   ❌ o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   ❌ M─┐ Merge branch '********' into '********'\n   ❌ │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   ❌ o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   ❌ o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   ❌ o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   ❌ o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********\n   ❌ o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   ❌ o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   ❌ o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   ❌ o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ❌ o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ********\n   ❔ o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   ✅ o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   ✅ o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   ✅ o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   ✅ o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   ✅ o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   ✅ o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   ✅ o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   ✅ M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n   命令执行后，git 自动切换到了 `83900f6d009f0158dfce0fccc241b2fa013d1743` 提交。\n\n1. 对当前提交 `83900f6d009f0158dfce0fccc241b2fa013d1743` 进行测试，标记当前提交是正常的\n\n   ```bash\n   ❯ git bisect good\n   fbdc27d4498e4d27828e8b7037d68c73f272878d is the first bad commit\n   commit fbdc27d4498e4d27828e8b7037d68c73f272878d\n   Author: ******** <********@********.com>\n   Date:   Thu Sep 5 15:11:00 2024 +0800\n\n       feat: ********\n\n   .../********.tsx                           |   5 +\n   src/********.js                            |   4 +\n   src/********.d.ts                          |   5 +\n   src/********.ts                            |  10 ++\n   .../********.ts                            |   2 +\n   src/********.ts                            |  21 ++++\n   src/********.ts                            |  36 ++++--\n   .../********.test.ts                       | 114 ++++++++++++++++++\n   src/********.ts                            |  88 ++++++++++++++\n   .../********.ts                            | 133 ++++++++++++++++++---\n   src/********.ts                            |  47 ++++++--\n   src/********.ts                            |   6 +\n   src/********.ts                            |   2 +\n   src/********.ts                            |  78 ++++++++++++\n   src/********.tsx                           |   2 +\n   src/********.tsx                           |   5 +\n   16 files changed, 524 insertions(+), 34 deletions(-)\n   create mode 100644 src/********.ts\n   create mode 100644 src/********.ts\n   create mode 100644 src/********.test.ts\n   create mode 100644 src/********.ts\n   create mode 100644 src/********.ts\n   create mode 100644 src/********.ts\n\n   # 查找结果\n   ❌ o [HEAD] [eacd4a0a85bfcc8691f22368079acab7412575d7] feat: ********\n   ❌ M─┐ Merge branch '********' into '********'\n   ❌ │ o [66504f3e0b73b568d379adbaf0e7b031d595187e] feat: ********\n   ❌ o─┘ [58625437bda334df576eb5b5031fba7ec990be65] fix: ********\n   ❌ o [07ee37373716bfb75f391ab3b65f68640a5e3951] feat: ********\n   ❌ o [ee948eb50bfcf7bfe47790f50053439f05ac0e5a] feat: ********\n   ❌ o [fedd7e523f90679ae0048138f5cf21ebf07be733] fix: ********\n   ❌ o [8ad08f09eb3a3225af9c05e59210c99ecd53f330] fix: ********\n   ❌ o [f71b6535d88613cb08211a277ce7f2c92c83d00e] feat: ********\n   ❌ o [e160869ec18a1980e100acc07d81a385392a8039] feat: ********\n   ❌ o [79a20e29636178e33479ec35cd23101b4080a6aa] feat: ********\n   ❌ o [fbdc27d4498e4d27828e8b7037d68c73f272878d] feat: ******** <-- 首个有问题的提交❗️❗️❗️\n   ✅ o [83900f6d009f0158dfce0fccc241b2fa013d1743] fix: ********\n   ✅ o [782c1fa6852522d5db16cfff88c7051c2ac0bf09] feat: ********\n   ✅ o [f3517468c23495063f99a9e49c657745d95ba88f] chore: ********\n   ✅ o [f11d08852b7fb0ef7e9d16056280edac5a772d57] feat: ********\n   ✅ o [839367048641d147cd28a38991a5c6d7dca3bb0d] feat: ********\n   ✅ o [147833f0a4f4ed7de21b62d919e937c4c6ec6cc4] feat: ********\n   ✅ o [43835476244b330ab8bd119e94c45aeaf0f32afa] chore: ********\n   ✅ o [e0c12e65ec86db44557756ddfc2ad510878ea9bf] feat: ********\n   ✅ M─┐ [ee62949cc48a5f60b16ef5fa62d0418ee36ac855] Merge branch '********' into 'release-24-09-02'\n   │ o [5cd65c0fd7ee8309d6ddec38e232eeae19f93a03] chore: 发布正式版本\n   ```\n\n## 其它命令\n\n你只需知道 `git bisect help` 命令就够了 💯\n\n```bash\n❯ git bisect help\nusage: git bisect [help|start|bad|good|new|old|terms|skip|next|reset|visualize|view|replay|log|run]\n\ngit bisect help\n        print this long help message.\ngit bisect start [--term-{new,bad}=<term> --term-{old,good}=<term>]\n                 [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<pathspec>...]\n        reset bisect state and start bisection.\ngit bisect (bad|new) [<rev>]\n        mark <rev> a known-bad revision/\n                a revision after change in a given property.\ngit bisect (good|old) [<rev>...]\n        mark <rev>... known-good revisions/\n                revisions before change in a given property.\ngit bisect terms [--term-good | --term-bad]\n        show the terms used for old and new commits (default: bad, good)\ngit bisect skip [(<rev>|<range>)...]\n        mark <rev>... untestable revisions.\ngit bisect next\n        find next bisection to test and check it out.\ngit bisect reset [<commit>]\n        finish bisection search and go back to commit.\ngit bisect (visualize|view)\n        show bisect status in gitk.\ngit bisect replay <logfile>\n        replay bisection log.\ngit bisect log\n        show bisect log.\ngit bisect run <cmd>...\n        use <cmd>... to automatically bisect.\n\nPlease use \"git help bisect\" to get the full man page.\n```\n\n这些命令都比较简单，但必须重点提一下的是 `git bisect run <cmd>...` 命令，在标记了 good 和 bad 提交之后，可以通过此命令自动查找出问题的提交。\n\n举一个前端常见的 🌰：**依赖安装失败**。前端项目免不了进行依赖安装，如果依赖安装失败后面的工作几乎无法开展。\n\n当遇到最新的代码无法安装依赖，但历史版本可以安装时：我们可以标记最新的提交为 bad，标记某个历史提交为 good，然后执行 `git bisect run npm i`，接下来 git 便会**自动**以二分顺序切出各个提交，逐一执行 `npm i` 命令。如果命令以非 0 退出，则标记该提交为 bad，反之标记为 good，直至找到首次出问题的提交。\n\n## 思路扩展\n\n同样的思路，在项目实践中，我们可以将主分支上的每一个提交都部署到测试环境，当出现一些不好定位的问题时，通过类似的工具去标记「正常的版本」和「有问题的版本」，结合人工检测或脚本检测（类似于 e2e 测试脚本）来自动查找首次出问题的版本。\n","tags":["git"],"categories":["技术"]},{"title":"重新出发","url":"/blog/生活/重新出发/","content":"\n我打算把大学期间的技术博客封存下来，重新写一些有意义的文章，同时我也会用这个平台记录未来的生活，💞 with @lsq210。\n\n<!-- more -->\n\n不过从易用性角度出发，如何快速发布博客是个大问题...\n\n## 2024-09-09 更新\n\n移动端不能配图，导致快速发布博客非常困难，可能需要一个自动上传图床的移动端编辑器，再一键转换为 markdown 格式的文章，再研究一下\n\n## 2024-09-26 更新\n\n移动端写 markdown 还是不好操作，在 PC 端用飞书文档来写就很不错，最后用工具转为 markdown 格式的文件就可以使用了，参考 [feishu2md](https://github.com/Wsine/feishu2md)\n","tags":["others"],"categories":["生活"]}]