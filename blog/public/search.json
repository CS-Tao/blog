[{"title":"个人独立主页与Hexo博客的集成","url":"/技术相关/个人独立主页与Hexo博客的集成/","content":"最近在写网页的时候，发现了一个很不错的基于Canvas的樱花飘落背景，于是想着怎么把它做成主页嵌入到自己的博客中，最开始笔者是用Github小号建立的Github Pages对该主页进行托管，然后把网页中的所有链接都指向我大号的Github Pages的相关链接。\n之后为了代码的通用性，我将该主页改造成了ejs模板，并利用[ejs-on-command](https://github.com/shennan/ejs-on-command)工具将其进行渲染为html，也是为了代码的通用性，我开始研究如何把这两个Github Pages融合为一个，也就是本篇文章将要讲解的内容：如何把个人独立的主页集成到Hexo博客中并利用命令`Hexo d`推送到Github Pages。以[我的主页](http://home.cs-tao.cc/)为例，[主页源码链接](https://github.com/CS-Tao/homepage)。\n<!-- more -->\n\n### Hexo博客配置\n\n- 为了实现个人主页和博客的兼容，需要修改Hexo主配置文件中的`root、url、public_dir`的值，比如我的（这样配置后便可以将原博客的源码移动到`public/blog/`文件夹下，博客访问链接变为了`<原网站链接>/blog/`）：\n    ```yml\n    url: https://cs-tao.github.io/blog/\n    root: /blog/\n    public_dir: public/blog/\n    ```\n- 修改hexo-deployer-git工具\n    我对hexo-deployer-git工具做了一些修改，在兼容原hexo-deployer-git工具的基础上，添加了`deploy.punlic_dir`配置，若未指定该配置，就直接使用`public_dir`配置的值。如果不对该工具做修改，在执行hexo g命令的时候hexo会将博客发布到`public_dir`配置对应的文件夹下，而在执行命令`hexo d`的时候，我们需要将整个public文件夹发布到远程，这时候需要指定`deploy.punlic_dir`的值，比如我的deploy配置：\n    ```yml\n    deploy:\n    - type: git\n      repository: https://github.com/CS-Tao/CS-Tao.github.io.git\n      branch: master\n      public_dir: public\n    ```\n    修改之后的hexo-deployer-git请到[https://github.com/CS-Tao/hexo-deployer-git](https://github.com/CS-Tao/hexo-deployer-git)下载，下载后替换掉Hexo博客根目录下的`node_modules\\hexo-deployer-git`即可。\n- 删除原`public`文件夹中的内容，将主页源码放入`public`文件夹\n- 生成博客并推送到Github\n    ```bash\n    hexo g\n    hexo d\n    ```\n---\n[博客源码链接](https://github.com/CS-Tao/CS-Tao.github.io)\n","tags":["Hexo"],"categories":["技术相关"]},{"title":"江城 初雪","url":"/随笔/江城-初雪/","content":"\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E9%9B%AA-%E6%98%9F%E6%B9%96.jpg\" width=\"65%\" height=\"65%\">\n\n今天朋友们都很兴奋，因为听说一会要下雪，不会很大，但从宿舍窗外望去，并没有要下雪的迹象，感觉一直在下雨。<br>\n下午吃完饭，天空还是飘起了不大不小的雪花，风很大，突然很伤感，于是给家人打了个电话报以问候，电话那头好像很热闹，听说也还没开始下雪。\n<!-- more -->\n\n---\n\n已经在武汉待了两年半，对于武汉的雪，我印象最深的还是我们大一第一学期的班聚，那时候所有的考试都结束了，我们在鲁磨路附近的一栋别墅里庆祝，无忧无虑，玩得很开心，那次班聚好像是和其他班联谊的，和哪个班我就记不清楚了。<br>\n那天我们发誓要玩一整晚，结果没有一个人遵守誓言。第二天早上，我们各自懒散地起床，打开别墅的门，看到门外白茫茫的一片。一行人就在这样的雪景中溜达到了公交站，我们一路上聊着、笑着，回到了武大。<br>\n银装素裹下的武大特别美，趁着雪景，把武大的各个角落逛了一遍，拍了很多照片。不知道现在的我还有没有那样的闲情逸致。\n\n---\n每年一下雪就会想听许嵩的《断桥残雪》，歌有些老了，每每听到都会莫名的伤感。\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=167937&auto=0&height=66\"></iframe>\n\n>那年一个人坐了20多小时火车专门跑去西湖看一眼断桥，全是人，没有雪。<p align=\"right\">—— <a href=\"http://music.163.com/#/song?id=167937\">网易云音乐</a></p>","tags":["生活"],"categories":["随笔"]},{"title":"一部致郁系暗黑童话","url":"/随笔/一部致郁系暗黑童话/","content":"\n** 《被遗忘的孩子 The Forgotten Child》** <Excerpt in index | 首页摘要>\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/poster.jpg\" alt=\"宣传海报\" width=\"60%\" height=\"60%\">\n\n这部影片讲述的是一个关于自由、人性和责任的故事。荣获了第31届西班牙戈雅奖最佳动画片奖，但和其他获奖影片不同的是，《被遗忘的孩子》中并没有出现快乐美好的结局。\n\n在一座和外界隔绝的小岛上，住着一群人形动物，生活平静，但就在不算很久以前，小岛上的工厂发生了爆炸，原本和谐的生活被彻底打破，小岛被严重污染，岛上大部分地方被垃圾覆盖，生存在垃圾堆里的人们，靠捡铜换钱为生，游离在社会的边缘，岛上没被污染的地方，人们过着很好的生活。\n\n很多人想逃离小岛，去到大海的另一头，但直到最后，也没有谁逃离了这个小岛，岛上唯一具有飞行能力，能飞到外面世界去的鸟孩，却身兼使命，需要把橡树种子撒满小岛，让小岛重现生机。\n\n小岛上每个人的心里都住着恶魔，人性黑暗的一面被完全展现了出来。这部不到75分钟的影片中，充满了许多对现实世界的隐喻，影片的主题最后在小老鼠的日志中表达了出来：没有什么会按照计划来。\n<!-- more -->\n\n---\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E7%99%BD%E9%BC%A0%E5%85%84%E5%BC%9F.png\" alt=\"白鼠兄弟\" width=\"50%\" height=\"50%\">\n\n影片开始是白鼠兄弟在垃圾场捡铜，对它们来说，铜就是血液，是他们生活的根本，在这个垃圾场生存的人们，需要表现出他们最凶狠的一面，和其他人争夺垃圾场的主权。鼠弟希望能去不远处的灯塔看看，但哥哥知道，那里面没有他们要的东西，为了生存，他们没有自由，只能不断捡铜。影片之后，白鼠兄弟遇见了黑鼠兄弟，双方大打出手，小黑鼠杀死了鼠弟，哥哥杀死了大黑鼠，也是为了生存，哥哥必须和小黑鼠共同生活，尽管对方刚杀死了自己至亲的人。\n\n---\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E7%8C%AA%E5%BC%9F.png\" alt=\"猪弟\" width=\"50%\" height=\"50%\">\n\n猪弟靠钓鱼为生，但环境日益恶化，鱼也越来越少，猪弟想等到他妈妈死后便离开这个岛，猪妈妈沉迷吸毒，每天以母爱的名义要求猪弟给她注射毒品，以至于她经常进入迷幻的状态，整个人完全被内深处的恶魔控制，在她清醒的时候，嘴里喃喃道“杀了它”，这个“它”也就是猪妈妈自己。最后猪弟亲手结束了她的生命，但猪弟已经没有了离开这个岛的欲望。\n\n---\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E9%BC%A0%E5%A6%B9.png\" alt=\"鼠妹\" width=\"50%\" height=\"50%\">\n\n鼠妹生活在一个条件较为优越的家庭，父亲很早就离开了她，妈妈改嫁，鼠妹在家里做什么都不受待见，她想和朋友们还有心上人鸟孩一起离开这个岛，她和朋友三人偷钱去垃圾场找克劳斯买船，因为钱太少只能买一只充气鸭，准备离开的时候被在垃圾场生活的老鼠们抓住，她的一个朋友被刀割瞎了一只眼睛，面对他们的是死亡的宣判。宣判前老鼠们中邪了一般齐呼：“我们是孤儿，我们是被遗忘的孩子，我们没有未来，我们现在在垃圾堆里，鲜血是我们的法则”。得知鼠妹有难的鸟孩唤醒了心中的恶魔，及时赶来，杀死了其他人，烧毁了整个垃圾场，然后鼠妹和她的朋友们坐上充气船，准备去往大海的另一边。但海上天气太差，船最终沉入了海底，三人游回了小岛。\n\n---\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E5%85%94%E5%A6%B9.png\" alt=\"兔妹\" width=\"50%\" height=\"50%\">\n\n鼠妹的好朋友兔妹，内心深处总有恶魔怂恿她做坏事，还好直到最后兔妹也没有做什么伤天害理的事情。仔细想想，这么一个普通的角色，不就是我们最好的缩影吗，每个人内心深处都有善的一面，也有恶的一面，只是我们愿意展现给世人的，是善的一面罢了。\n\n---\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E9%B8%9F%E5%AD%A9.png\" alt=\"鸟孩\" width=\"50%\" height=\"50%\">\n\n鸟孩是本部影片的主角，靠吸毒保持自己飞翔的能力，但吸毒也使他内心深处的恶魔越来越强大，鼠妹希望能和他一起离开这个小岛，但鸟孩是这个岛上唯一有飞行能力的人形动物，他得继承父亲的遗志，将橡树种子撒满小岛，让小岛恢复以前的模样。小岛上的士兵一直认为鸟孩和他的父亲在岛上散布毒品，下令通缉，鸟孩的父亲就死在老士兵的枪下，老士兵一直以此为荣，最后小士兵的子弹射穿了鸟孩的心脏，老士兵很欣慰，但从小士兵的脸上能看到的却只有迷茫。鸟孩死了，影片结尾他的灵魂带领鼠妹找到了橡树种子的来源地，有无数的灵魂在这里自由地飞舞，鸟孩生前没有自由，死亡却将自由带给了他，这应该是这部影片唯一让我们聊以慰藉的地方了。\n\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E7%BB%93%E5%B0%BE.png\" width=\"50%\" height=\"50%\">\n\n---\n\n影片中的隐喻太多，涉及个人、亲情、朋友、社会以及宗教，寓意之深，实在难以深入描述。\n\n---\n\n>温馨提醒：本片片风惊悚、诡异，胆小慎看。","tags":["生活"],"categories":["随笔"]},{"title":"关系数据库中的范式","url":"/技术相关/关系数据库中的范式/","content":"\n最近在复习备考《空间数据库》的时候，偶然发现了范式（Normal Form）这一词语，才意识到，当初数据库课上的内容已经忘得差不多了。\n\n关系数据库的范式是对数据库中关系模式标准级别的描述，符合高一级的范式的关系模式一定符合低一级的范式。目前关系模式的范式一共分为8个级别，由低到高依次为第一范式（1NF），第二范式（2NF），第三范式（3NF），巴斯-科德范式（BCNF），第四范式（4NF），第五范式（5NF，又称完美范式），DK范式，第六范式（目前最高的范式）。我们一般的数据库满足第三范式即可。本文对第一范式到第五范式做一点简单的记录。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 第一范式（1NF）\n\n属性不可再分，即所有属性均具有原子性。\n\n它的一个必要条件是属性定长。\n\n# 第二范式（2NF）\n\n在满足第一范式的基础上，需满足该关系模式必须有主键，而且所有的非主属性不能部分依赖于主键。\n\n主键由一个或多个主属性（即多列）组成，其他所有属性必须由主键的所有属性唯一确定，不能存在由主键的某部分属性便能确定的列，即非主属性必须完全依赖于主键。\n\n>比如，高中我在班上的学号为13，如果有一张表\n>\n>|班级|学号|姓名|班主任|\n>|:-:|:-:|:-:|:-:|\n>|-|-|-|-|\n>\n>这张表的主键为（班级，学号），那么我们可以看到，[姓名]由[班级]和[学号]唯一确定是没问题的，而且仅由[班级]或[学号]是无法确定姓名的，然而[班主任]却只由[班级]唯一确定，即[班主任]仅部分依赖于主键（班级，学号），不符合第二范式。应将原表拆分为\n>\n>|班级|学号|姓名|\n>|:-:|:-:|:-:|\n>|-|-|-|\n>\n>和\n>\n>|班级|班主任|\n>|:-:|:-:|\n>|-|-|\n\n# 第三范式（3NF）\n\n在满足第二范式的基础上，需满足非主属性不传递依赖于主键。\n\n非主属性不能完全依赖于另外一个或多个非主属性，也就是说，非主属性必须完全依赖于主键，而不是通过其他非主属性传递依赖于主键。\n\n>比如，我大学在学校的学号为123456789，如果有一张表\n>\n>|学号|院系|班级|姓名|班主任|\n>|:-:|:-:|:-:|:-:|:-:|\n>|-|-|-|-|-|\n>\n>这张表的主键为[学号]，[班主任]依赖于[院系]和[班级]，由于[院系]和[班级]不是主属性，所以该关系模式不符合第三范式。应将原表拆分为\n>\n>|学号|院系|班级|姓名|\n>|:-:|:-:|:-:|:-:|\n>|-|-|-|-|\n>\n>和\n>\n>|院系|班级|班主任|\n>|:-:|:-:|:-:|\n>|-|-|-|\n\n# 巴斯-科德范式（BCNF）\n\n在满足第三方式的基础上，需满足任何属性不传递依赖于主键。\n\n与第三范式对比我们可以发现，第三方式只对非主属性做了约束，而BC范式对所有属性做了约束。所有属性不能完全依赖于其他一个或多个非主属性，所有属性必须完全依赖于主键，不能通过其他非主属性传递依赖于主键。\n\n>如下表，其中学号为某一研究方向下的学号，一个研究方向下有多位导师\n>\n>|研究方向|学生学号|导师|平均成绩|\n>|:-:|:-:|:-:|:-:|\n>|-|-|-|-|\n>\n>主键为[研究方向]和[学号]。导师需要由[研究方向]和该方向下的[学生学号]确定，平均成绩也需要[研究方向]和[学生学号]确定，满足第二范式。非主属性[导师]和[平均成绩]没有依赖关系，满足第三范式。但主属性[研究方向]依赖于[导师]，当[导师]确定了，[研究方向]也就确定了。换句话说，属性[研究方向]完全依赖于非主属性[导师]，不符合BC范式。原表应拆分为\n>\n>|研究方向|学生学号|平均成绩|\n>|:-:|:-:|:-:|\n>|-|-|-|\n>\n>和\n>\n>|导师|研究方向|\n>|:-:|:-:|\n>|-|-|\n\n# 第四范式（4NF）\n\n在满足BC范式的基础上，关系模型不能存在多值依赖。\n\n多值依赖是指如果给定了A属性，B、C两个属性就得确定。那么如果A确定了，但B未确定，就不能插入数据。第四方式规定关系模型中不能出现多值依赖的情况。\n\n# 第五范式（5NF，完美范式）\n\n在满足第四范式的基础上，需将表分解为逻辑上不同主键的表。主要是为了排除表中的所有冗余。\n\n第五范式消除了第四范式表的连接依赖。","tags":["数据库"],"categories":["技术相关"]},{"title":"2017-12-12记","url":"/随笔/2017-12-12记/","content":"\n<img src=\"https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/2016-08-02_%E5%AE%B6%E4%B9%A1%E7%9A%84%E8%AE%B0%E5%BF%86.jpg\" width=\"60%\" height=\"60%\">\n\n生命本是一场漂泊的漫旅，走过的每一个地方，遇见的每一个人，或许终将成为驿站，成为过客。总喜欢追忆，喜欢眷恋，才发现，那些曾经以为恋恋不忘的事，就在我们恋恋不忘的过程中，已慢慢淡忘。","tags":["生活"],"categories":["随笔"]},{"title":"远程git仓库的建立和配置","url":"/技术相关/远程git仓库的建立和配置/","content":"** 远程git仓库的建立和配置** <Excerpt in index | 首页摘要>\n本篇博文主要介绍如何建立远程git仓库以及如何在gitweb页面中显示仓库的描述信息，以Ubuntu 16.04 LTS操作系统为例。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 安装并配置gitweb\n\n参考[基于Apache服务器的gitweb安装和配置](http://blog.cs-tao.cc/2017/10/19/gitweb%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/)\n\n# 新建文件夹\n\n为了能在gitweb上查看仓库的信息，建议在gitweb的仓库根目录下新建文件夹（仓库根目录在gitweb的配置文件\"/etc/gitweb.conf\"中由\"$projectroot\"变量指定）\n\n~~~bash\nmkdir Test.git\n~~~\n\ngit远程库目录建议带上.git后缀。\n\n# 更改文件夹权限并切换到用于远程ssh连接的用户\n\n因为我们用于连接私有git仓库的方法是ssh远程连接，我们以有远程ssh登录权限的用户'CSTao'为例。\n\n~~~bash\nchown -R CSTao:CSTao Test.git\nsu CSTao\n~~~\n\n>注意：本步骤和第一步的顺序可以交换，那么便可以不使用chown命令更改文件夹权限，只切换用户即可。笔者这样做的原因是我新建的文件夹所在目录的权限不属于用户CSTao，以CSTao用户新建文件夹会出现权限不足的警告。\n\n# 建立仓库\n\n ~~~bash\n cd Test.git\n git init --bare\n ~~~\n 和建立本地仓库的命令不一样的是，建立远程仓库其实建立了一个裸仓库，也就是不含文件信息，只有git的提交记录。\n\n# 配置描述信息\n\n## 修改描述文件\n\n ~~~bash\n vim description\n ~~~\n 写入描述信息即可\n\n## 修改配置文件\n\n ~~~bash\n vim config\n ~~~\n 在原有内容后添加\n ~~~bash\n[gitweb]\n        owner = CSTao <whucstao@qq.com>\n        URL = ssh://CSTao@39.108.171.209:22/home/git/repositories/Test.git\n ~~~\n 通过owner指定gitweb中owner的显示内容，通过URL指定gitweb中URL的显示内容，基本格式为\"ssh://[ssh登录的用户名]@[host:ssh端口][远程主机中的仓库目录]\"\n\n# 将远程裸仓库克隆到本地\n\n 在本地计算机的特定文件夹中执行：\n ~~~bash\n git clone ssh://CSTao@39.108.171.209:22/home/git/repositories/Test.git\n ~~~\n\n# 添加文件、提交更改、推送到远程\n\n这部分内容为git的基本操作，不再详述","tags":["git"],"categories":["技术相关"]},{"title":"gitweb安装和配置","url":"/技术相关/gitweb安装和配置/","content":"** 基于Apache服务器的gitweb安装和配置** <Excerpt in index | 首页摘要>\ngitweb需要使用的配置文件的位置和功能。操作系统：Ubuntu 16.04 LTS\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# gitweb安装和配置（在前人的基础上做了一些添加和修改）\n\n[原文地址](http://blog.csdn.net/qq_25667339/article/details/53083968)\n\n## 安装gitweb和Apache\n\n```bash\nsudo apt-get install gitweb apache2\n```\n\n## 修改/etc/gitweb.conf\n\n```bash\nvim /etc/gitweb.conf\n```\n\n内容如下：\n\n```bash\n$projectroot = \"/home/git/repositories\";\n\n$git_temp = \"/tmp\";\n\n$projects_list = $projectroot;\n\n@stylesheets = (\"../gitweb/static/gitweb.css\");\n\n$javascript = \"../gitweb/static/gitweb.js\";\n\n$logo = \"../gitweb/static/git-logo.png\";\n\n$favicon = \"../gitweb/static/git-favicon.png\";\n\n@diff_opts = ();\n```\n\n保存退出\n\n## 修改/etc/apache2/conf-available/gitweb.conf\n\n```bash\nvim /etc/apache2/conf-available/gitweb.conf\n```\n\n内容如下：\n\n```xml\nAlias /gitweb /usr/share/gitweb\n<Directory /usr/share/gitweb>\n    Options +FollowSymLinks +ExecCGI\n    AddHandler cgi-script .cgi\n    AuthType Basic\n    AuthName \"Restricted Content\"\n    AuthUserFile /home/git/.htpasswd\n    Require valid-user\n</Directory>\n```\n\n保存退出\n\n`注意：`\"AuthUserFile\"是认证文件位置，用如下命令生成认证文件并添加一个访问用户：\n\n```bash\nhtpasswd -c 认证文件位置 用户名\n```\n\n然后根据提示输入密码即可。\n\n## 使cgi生效\n\n```bash\nsudo a2enmod cgi\nsudo service apache2 restart\n```\n\n## 访问gitweb\n\n如果搭建在本地，访问[http://localhost/gitweb](http://localhost/gitweb)并登录就可看到gitweb设置的git库根目录下的所有项目信息。\n\n但此时访问[http://localhost/cgi-bin/gitweb.cgi](localhost/cgi-bin/gitweb.cgi)不用登录也能访问到项目信息。笔者直接删除了\"/usr/lib/cgi-bin/\"文件夹中与gitweb相关的文件。其他人便不能通过该路径访问。\n\n## 配置布局\n\n可以使用别人已经写好的布局和图标，详见[github](https://github.com/kogakure/gitweb-theme)\n\n# 注意事项\n\n- 需要将\"/usr/share/gitweb\"文件夹下的文件和文件夹设置正确的权限，<其他用户>必须有读取文件权限和执行文件权限。缺少读文件的权限服务器会返回\"Internal Server Error(500)\"错误，缺少执行文件的权限服务器会返回\"Forbidden(403)\"错误。读取文件权限为4，执行文件权限为1，也就是说<其他用户>的权限至少为'5'。如下，笔者设置的'755'权限的最后一个'5'对应<其他用户>的权限。\n\n    ~~~bash\n    cd /usr/share/gitweb/\n    sudo chmod -R 755 .\n    ~~~\n\n- 旧版本Apache的/etc/apache2/conf.d/gitweb和新版本的/etc/apache2/conf-available/gitweb的是同一个目录。\n\n# 配置文件备忘\n\n## 主配置文件\n\n- 文件位置：\"/etc/gitweb.conf\"\n- 文件功能：设置项目集根目录、临时文件目录、布局文件位置及资源文件位置等。\n\n## Apache中gitweb的配置\n\n- 文件位置：\"/etc/apache2/conf-available/gitweb.conf\"\n- 文件功能：指定CGI文件位置、认证文件位置等。\n- 主要内容：\n\n```xml\n<IfDefine ENABLE_GITWEB>\n    Alias /gitweb /usr/share/gitweb\n    <Directory /usr/share/gitweb>\n        Options +FollowSymLinks +ExecCGI\n        AddHandler cgi-script .cgi\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /home/git/.htpasswd\n        Require valid-user\n    </Directory>\n</IfDefine>\n```","tags":["Apache"],"categories":["技术相关"]},{"title":"解决C#发送电子邮件失败的问题","url":"/技术相关/解决C-发送电子邮件失败的问题/","content":"** 解决C#-WPF桌面软件发送电子邮件失败的问题** <Excerpt in index | 首页摘要>\n    C#发送邮件的方法在网上搜一下可以找到很多，几个小时过去了还是没能实现，对比了很多人写的博客，笔者最终找到了问题所在，并在此记录。\n<!-- more -->\n\n# 实现过程\n\n- 配置App.Config文件\n    - 在项目中添加`System.Configuration`程序集的引用\n    - 在App.Config文件中添加键值，如下（只需要关注appSettings标签内的内容）\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <configSections>\n    <section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=*************\" requirePermission=\"false\" />\n    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->\n  </configSections>\n  <startup>\n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\" />\n  </startup>\n  <appSettings>\n  <!--邮箱-->\n    <add key=\"MANAGER_MAIL_NUM\" value=\"123456789@qq.com\" />\n    <!--邮箱密码-->\n    <add key=\"MANAGER_MAIL_PASSWORD\" value=\"邮箱密码。QQ邮箱需要许可码\" />\n    <!--邮件显示名-->\n    <add key=\"MANAGER_MAIL_NAME\" value=\"发送邮件使用的用户名\" />\n    <!--QQ邮箱对应的SMTP服务器-->\n    <add key=\"SmtpClient_HOST\" value=\"smtp.qq.com\"/>\n  </appSettings>\n</configuration>\n```\n\n- EmailHelper.cs文件内容\n\n```C#\nusing System;\nusing System.Text;\nusing System.Net.Mail;\nusing static System.Configuration.ConfigurationManager;\n\nnamespace View_Spot_of_City.UIControls.Helper\n{\n    public static class EmailHelper\n    {\n        public static bool SendEmail(string mail, string title, string content)\n        {\n            MailMessage message = new MailMessage();\n            {\n                message.To.Add(mail);\n                message.From = new MailAddress(AppSettings[\"MANAGER_MAIL_NUM\"], AppSettings[\"MANAGER_MAIL_NAME\"], Encoding.UTF8);\n                message.Subject =title;\n                message.SubjectEncoding = Encoding.UTF8;\n                message.Body = content;\n                message.BodyEncoding = Encoding.UTF8;\n                message.IsBodyHtml = false;\n                message.Priority = MailPriority.Normal;\n            }\n\n            SmtpClient smtp = new SmtpClient();\n            {\n                smtp.Host = AppSettings[\"SmtpClient_HOST\"];\n                smtp.EnableSsl = true;\n                smtp.UseDefaultCredentials = false;\n                smtp.Credentials = new System.Net.NetworkCredential(AppSettings[\"MANAGER_MAIL_NUM\"], AppSettings[\"MANAGER_MAIL_PASSWORD\"]);\n            }\n            object userState = message;\n            try\n            {\n                smtp.SendAsync(message, userState);\n                return true;\n            }\n            catch(Exception ex)\n            {\n                Console.Write(ex.Message);\n                return false;\n            }\n        }\n    }\n}\n```\n\n# 注意\n\n若使用QQ邮箱，输入密码为许可码，需要在QQ邮箱中打开SMTP服务\n\n- 打开QQ邮箱网页版\n- 点击左上角“设置”，并在导航栏中点击账户标签\n- 开启SMTP服务并获得许可码\n    ![开启SMTP服务](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/WpfSendMail.png)","tags":["C#"],"categories":["技术相关"]},{"title":"WPF自定义消息框","url":"/软件开发/WPF自定义消息框/","content":"** 一个更改按钮显示语言的的WPF消息框** <Excerpt in index | 首页摘要>\n消息框采用Material风格，支持中英切换，支持的返回值有Ok、Cancel、Yes、No，代码已托管并发布至[Github](https://github.com/CS-Tao/MyMessageBox/releases/tag/v1.0)\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 效果预览\n\n- 带OK按钮的消息框\n\n![带OK按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OK1.png)\n![带OK按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OK2.png)\n\n- 带OK和取Cancel按钮的消息框\n\n![带OK和取Cancel按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OKCancel1.png)\n![带OK和取Cancel按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OKCancel2.png)\n\n- 带Yes和No按钮的消息框\n\n![带Yes和No按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNo1.png)\n![带Yes和No按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNo2.png)\n\n- 带Yes、No和Cancel按钮的消息框\n\n![带Yes、No和Cancel按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNoCancel1.png)\n![带Yes、No和Cancel按钮的消息框](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNoCancel2.png)\n\n# 使用方法\n\n## 首先\n\n- 引用本消息框所在程序集。\n- 在App.xaml文件中添加：\n\n```xml\n<ResourceDictionary Source=\"pack://application:,,,/CSTao.MessageBox;component/Resources.xaml\"/>\n```\n\n如下：\n\n![添加资源字典](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MessageBoxResoureCode.png)\n\n## 使用MessageBox\n\n- 在程序中需要使用的地方添加命名空间：\n\n```C#\nusing CSTao.MessageBox;\n```\n\n- 调用MessageboxMaster.Show()函数，该函数有多个重载，请按您的需求使用。\n\n## 使用语言切换\n\n- 静态修改\n\n将`MyMessageBox\\MyMessagebox\\CSTao.MessageBox\\Languages\\LanguagesDictionary.xaml`中的`Language.CN.xaml`改为`Language.EN.xaml`即可。\n\n- 动态修改\n\n在您定义的修改语言的响应函数中添加代码\n\n```C#\nstring requestedCulture = string.Format(@\"pack://application:,,,/CSTao.MessageBox;component/Languages/Language.{0}.xaml\", languageDictionary[0或1]);\nResourceDictionary resourceDictionary = Application.Current.Resources.MergedDictionaries.FirstOrDefault((x) =>\n{\n    return (x.Source == null) ? false : (x.Source.OriginalString.Contains(\"CSTao.MessageBox;component/Languages\"));\n});\nif (resourceDictionary != null)\n{\n    Application.Current.Resources.MergedDictionaries.Remove(resourceDictionary);\n    ResourceDictionary requestDictionary = new ResourceDictionary()\n    {\n        Source = new Uri(requestedCulture)\n    };\n    Application.Current.Resources.MergedDictionaries.Add(requestDictionary);\n}\n```\n\n`温馨提醒:`本方法是笔者用于全局改变软件语言的代码，不仅针对本消息框，慎用\n\n## 修改主题颜色\n\n修改`MyMessageBox\\MyMessagebox\\CSTao.MessageBox\\Resources.xaml`中`PrimaryHueBrush`键的值即可\n\n# 特别感谢\n\n感谢[师兄](https://hpdell.github.io/)提供的代码参考。","tags":["Wpf"],"categories":["软件开发"]},{"title":"关于带登录界面的WPF应用的问题","url":"/软件开发/关于带登录界面的WPF应用的问题/","content":"** 解决WPF关闭登录窗口后主窗口无法打开的问题** <Excerpt in index | 首页摘要>\n    笔者最近在开发一款[WPF应用程序](https://github.com/CS-Tao/View-Spot-of-City)的时候，发现在登录窗口关闭之后，主窗口无法打开，遂上网搜索了一下，找到了问题所在\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 问题描述\n\n笔者通过重载App类OnStartup()函数，在其中添加了启动登录框的代码：\n\n```C#\nprotected override void OnStartup(StartupEventArgs e)\n{\n    //验证License\n    if (!RegisterMaster.CanStart())\n    {\n        Environment.Exit(0);\n    }\n\n    //登录\n    bool? loginDlgResult = (new LoginDlg()).ShowDialog();\n    if (!loginDlgResult.HasValue || !loginDlgResult.Value)\n        Environment.Exit(0);\n\n    base.OnStartup(e);\n}\n```\n\n却发现登录窗口关闭后不能启动主窗口（也就是WPF自动生成的MainWindow类对应的窗口）。\n\n# 解决方法\n\n将App的ShutdownMode属性改为OnExplicitShutdown即可：\n\n```C#\nprotected override void OnStartup(StartupEventArgs e)\n{\n    //应用程序关闭时，才System.Windows.Application.Shutdown调用\n    this.ShutdownMode = ShutdownMode.OnExplicitShutdown;\n\n    //验证License\n    if (!RegisterMaster.CanStart())\n    {\n        Environment.Exit(0);\n    }\n\n    //登录\n    bool? loginDlgResult = (new LoginDlg()).ShowDialog();\n    if (!loginDlgResult.HasValue || !loginDlgResult.Value)\n        Environment.Exit(0);\n\n    base.OnStartup(e);\n}\n```\n\n`注意：`需要关闭应用程序时需要显示调用System.Windows.Application.Shutdown()函数，或其他退出程序的函数。\n\n# 出现问题的原因\n\n由上我们可以看出问题的根源就是App的ShutdownMode属性，那么这个属性有什么意义呢？<br>\n我们可以很容易地知道ShutdownMode是一个枚举属性，其可能得取值有三个，分别是OnLastWindowClose、OnMainWindowClose、OnExplicitShutdown。<br>进一步探索笔者发现ShutdownMode属性的默认值为OnLastWindowClose，也就是WPF会在最后一个窗口关闭时隐式调用Application的Shutdown()函数，对此MSDN中有提到：https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.shutdownmode(v=vs.100).aspx<br>\n>如果将 ShutdownMode 设置为 OnLastWindowClose，则 Windows Presentation Foundation (WPF) 会在应用程序中的最后一个窗口关闭时隐式调用 Shutdown，即使任何当前已经实例化的窗口被设置为主窗口也是如此。请参见 https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.mainwindow(v=vs.100).aspx\n\nWPF会把第一个在AppDomain中实例化的第一个Window对象的引用，自动设置为应用程序的主窗口，也就是说当登录框实例化的时候，就被设置为主窗口了。且当登录窗口关闭时，没有任何其他的窗口处于显示状态，满足`OnLastWindowClose`的退出条件，WPF会隐式调用ShutDown()，以至于真正的主窗口无法显示。","tags":["Wpf"],"categories":["软件开发"]},{"title":"Android工具包-xUtils基本使用","url":"/软件开发/Android工具包-xUtils基本使用/","content":"** xUtils基本使用 ** <Excerpt in index | 首页摘要>\n    本文转自[开源中国](http://www.oschina.net/p/xutils?fromerr=FllYBeuf \"查看原文\")，因为原文的markdown格式出于某种原因未渲染，笔者将其转到了自己博客，方便查看\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## xUtils3简介\n* xUtils 包含了orm, http(s), image, view注解, 但依然很轻量级(246K), 并且特性强大, 方便扩展:\n  - `稳定的基石`: `AbsTask`和统一的回调接口`Callback`, 任何异常, 即使你的回调方法实现有异常都会进入`onError`, 任何情况下`onFinished`总会让你知道任务结束了.\n  - 基于高效稳定的`orm`工具, `http`模块得以更方便的实现cookie(支持domain, path, expiry等特性)和\n    缓存(支持Cache-Control, Last-Modified, ETag等特性)的支持.\n  - 有了强大的`http`及其下载缓存的支持, `image`模块的实现相当的简洁, 并且支持回收被view持有, 但被Mem Cache移除的图片, 减少页面回退时的闪烁..\n  - `view`注解模块仅仅400多行代码却灵活的支持了各种View注入和事件绑定, 包括拥有多了方法的listener的支持.\n\n### 其他特性\n* 支持超大文件(超过2G)上传\n* 更全面的http请求协议支持(11种谓词)\n* 拥有更加灵活的ORM, 和greenDao一致的性能\n* 更多的事件注解支持且不受混淆影响...\n* 图片绑定支持gif(受系统兼容性影响, 部分gif文件只能静态显示), webp; 支持圆角, 圆形, 方形等裁剪, 支持自动旋转...\n* 从3.5.0开始不再包含libwebpbackport.so, 需要在Android4.2以下设备兼容webp的请使用3.4.0版本.\n\n#### 使用Gradle构建时添加一下依赖即可:\n```javascript\ncompile 'org.xutils:xutils:3.5.0'\n```\n##### 如果使用eclipse可以 [点击这里下载aar文件](http://dl.bintray.com/wyouflf/maven/org/xutils/xutils/), 然后用zip解压, 取出jar文件.\n##### 混淆配置参考示例项目sample的配置\n\n\n#### 常见问题:\n1. 更好的管理图片缓存: https://github.com/wyouflf/xUtils3/issues/149\n2. Cookie的使用: https://github.com/wyouflf/xUtils3/issues/125\n3. 关于query参数? http请求可以通过 header, url, body(请求体)传参; query参数是url中问号(?)后面的参数.\n4. 关于body参数? body参数只有PUT, POST, PATCH, DELETE(老版本RFC2616文档没有明确指出它是否支持, 所以暂时支持)请求支持.\n5. 自定义Http参数对象和结果解析: https://github.com/wyouflf/xUtils3/issues/191\n\n#### 使用前配置\n##### 需要的权限\n```xml\n\n\n```\n##### 初始化\n```java\n// 在application的onCreate中初始化\n@Override\npublic void onCreate() {\n    super.onCreate();\n    x.Ext.init(this);\n    x.Ext.setDebug(BuildConfig.DEBUG); // 是否输出debug日志, 开启debug会影响性能.\n    ...\n}\n```\n\n### 使用@Event事件注解(@ContentView, @ViewInject等更多示例参考sample项目)\n```java\n/**\n * 1. 方法必须私有限定,\n * 2. 方法参数形式必须和type对应的Listener接口一致.\n * 3. 注解参数value支持数组: value={id1, id2, id3}\n * 4. 其它参数说明见{@link org.xutils.event.annotation.Event}类的说明.\n **/\n@Event(value = R.id.btn_test_baidu1,\n        type = View.OnClickListener.class/*可选参数, 默认是View.OnClickListener.class*/)\nprivate void onTestBaidu1Click(View view) {\n...\n}\n```\n\n### 访问网络(更多示例参考sample项目)\n```java\n/**\n * 自定义实体参数类请参考:\n * 请求注解 {@link org.xutils.http.annotation.HttpRequest}\n * 请求注解处理模板接口 {@link org.xutils.http.app.ParamsBuilder}\n *\n * 需要自定义类型作为callback的泛型时, 参考:\n * 响应注解 {@link org.xutils.http.annotation.HttpResponse}\n * 响应注解处理模板接口 {@link org.xutils.http.app.ResponseParser}\n *\n * 示例: 查看 org.xutils.sample.http 包里的代码\n */\nBaiduParams params = new BaiduParams();\nparams.wd = \"xUtils\";\n// 有上传文件时使用multipart表单, 否则上传原始文件流.\n// params.setMultipart(true);\n// 上传文件方式 1\n// params.uploadFile = new File(\"/sdcard/test.txt\");\n// 上传文件方式 2\n// params.addBodyParameter(\"uploadFile\", new File(\"/sdcard/test.txt\"));\nCallback.Cancelable cancelable\n       = x.http().get(params,\n       /**\n        * 1. callback的泛型:\n        * callback参数默认支持的泛型类型参见{@link org.xutils.http.loader.LoaderFactory},\n        * 例如: 指定泛型为File则可实现文件下载, 使用params.setSaveFilePath(path)指定文件保存的全路径.\n        * 默认支持断点续传(采用了文件锁和尾端校验续传文件的一致性).\n        * 其他常用类型可以自己在LoaderFactory中注册,\n        * 也可以使用{@link org.xutils.http.annotation.HttpResponse}\n        * 将注解HttpResponse加到自定义返回值类型上, 实现自定义ResponseParser接口来统一转换.\n        * 如果返回值是json形式, 那么利用第三方的json工具将十分容易定义自己的ResponseParser.\n        * 如示例代码{@link org.xutils.sample.http.BaiduResponse}, 可直接使用BaiduResponse作为\n        * callback的泛型.\n        *\n        * 2. callback的组合:\n        * 可以用基类或接口组合个种类的Callback, 见{@link org.xutils.common.Callback}.\n        * 例如:\n        * a. 组合使用CacheCallback将使请求检测缓存或将结果存入缓存(仅GET请求生效).\n        * b. 组合使用PrepareCallback的prepare方法将为callback提供一次后台执行耗时任务的机会,\n        * 然后将结果给onCache或onSuccess.\n        * c. 组合使用ProgressCallback将提供进度回调.\n        * ...(可参考{@link org.xutils.image.ImageLoader}\n        * 或 示例代码中的 {@link org.xutils.sample.download.DownloadCallback})\n        *\n        * 3. 请求过程拦截或记录日志: 参考 {@link org.xutils.http.app.RequestTracker}\n        *\n        * 4. 请求Header获取: 参考 {@link org.xutils.http.app.RequestInterceptListener}\n        *\n        * 5. 其他(线程池, 超时, 重定向, 重试, 代理等): 参考 {@link org.xutils.http.RequestParams}\n        *\n        **/\n       new Callback.CommonCallback() {\n           @Override\n           public void onSuccess(String result) {\n               Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();\n           }\n\n           @Override\n           public void onError(Throwable ex, boolean isOnCallback) {\n               //Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();\n               if (ex instanceof HttpException) { // 网络错误\n                   HttpException httpEx = (HttpException) ex;\n                   int responseCode = httpEx.getCode();\n                   String responseMsg = httpEx.getMessage();\n                   String errorResult = httpEx.getResult();\n                   // ...\n               } else { // 其他错误\n                   // ...\n               }\n               Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();\n           }\n\n           @Override\n           public void onCancelled(CancelledException cex) {\n               Toast.makeText(x.app(), \"cancelled\", Toast.LENGTH_LONG).show();\n           }\n\n           @Override\n           public void onFinished() {\n\n           }\n       });\n\n// cancelable.cancel(); // 取消请求\n```\n#### 如果你只需要一个简单的版本:\n```java\n@Event(value = R.id.btn_test_baidu2)\nprivate void onTestBaidu2Click(View view) {\n    RequestParams params = new RequestParams(\"https://www.baidu.com/s\");\n    params.setSslSocketFactory(...); // 设置ssl\n    params.addQueryStringParameter(\"wd\", \"xUtils\");\n    x.http().get(params, new Callback.CommonCallback() {\n        @Override\n        public void onSuccess(String result) {\n            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onError(Throwable ex, boolean isOnCallback) {\n            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onCancelled(CancelledException cex) {\n            Toast.makeText(x.app(), \"cancelled\", Toast.LENGTH_LONG).show();\n        }\n\n        @Override\n        public void onFinished() {\n\n        }\n    });\n}\n````\n#### 带有缓存的请求示例:\n```java\nBaiduParams params = new BaiduParams();\nparams.wd = \"xUtils\";\n// 默认缓存存活时间, 单位:毫秒.(如果服务没有返回有效的max-age或Expires)\nparams.setCacheMaxAge(1000 * 60);\nCallback.Cancelable cancelable\n       // 使用CacheCallback, xUtils将为该请求缓存数据.\n      = x.http().get(params, new Callback.CacheCallback() {\n\n   private boolean hasError = false;\n   private String result = null;\n\n   @Override\n   public boolean onCache(String result) {\n      // 得到缓存数据, 缓存过期后不会进入这个方法.\n      // 如果服务端没有返回过期时间, 参考params.setCacheMaxAge(maxAge)方法.\n        //\n        // * 客户端会根据服务端返回的 header 中 max-age 或 expires 来确定本地缓存是否给 onCache 方法.\n        //   如果服务端没有返回 max-age 或 expires, 那么缓存将一直保存, 除非这里自己定义了返回false的\n        //   逻辑, 那么xUtils将请求新数据, 来覆盖它.\n        //\n        // * 如果信任该缓存返回 true, 将不再请求网络;\n        //   返回 false 继续请求网络, 但会在请求头中加上ETag, Last-Modified等信息,\n        //   如果服务端返回304, 则表示数据没有更新, 不继续加载数据.\n        //\n        this.result = result;\n        return false; // true: 信任缓存数据, 不在发起网络请求; false不信任缓存数据.\n   }\n\n   @Override\n   public void onSuccess(String result) {\n      // 注意: 如果服务返回304 或 onCache 选择了信任缓存, 这时result为null.\n        if (result != null) {\n          this.result = result;\n      }\n   }\n\n   @Override\n   public void onError(Throwable ex, boolean isOnCallback) {\n      hasError = true;\n      Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();\n      if (ex instanceof HttpException) { // 网络错误\n         HttpException httpEx = (HttpException) ex;\n         int responseCode = httpEx.getCode();\n         String responseMsg = httpEx.getMessage();\n         String errorResult = httpEx.getResult();\n         // ...\n      } else { // 其他错误\n         // ...\n      }\n   }\n\n   @Override\n   public void onCancelled(CancelledException cex) {\n      Toast.makeText(x.app(), \"cancelled\", Toast.LENGTH_LONG).show();\n   }\n\n   @Override\n   public void onFinished() {\n      if (!hasError && result != null) {\n         // 成功获取数据\n         Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();\n      }\n   }\n});\n```\n\n### 使用数据库(更多示例参考sample项目)\n```java\nParent test = db.selector(Parent.class).where(\"id\", \"in\", new int[]{1, 3, 6}).findFirst();\nlong count = db.selector(Parent.class).where(\"name\", \"LIKE\", \"w%\").and(\"age\", \">\", 32).count();\nList testList = db.selector(Parent.class).where(\"id\", \"between\", new String[]{\"1\", \"5\"}).findAll();\n```\n\n### 绑定图片(更多示例参考sample项目)\n```java\nx.image().bind(imageView, url, imageOptions);\n\n// assets file\nx.image().bind(imageView, \"assets://test.gif\", imageOptions);\n\n// local file\nx.image().bind(imageView, new File(\"/sdcard/test.gif\").toURI().toString(), imageOptions);\nx.image().bind(imageView, \"/sdcard/test.gif\", imageOptions);\nx.image().bind(imageView, \"file:///sdcard/test.gif\", imageOptions);\nx.image().bind(imageView, \"file:/sdcard/test.gif\", imageOptions);\n\nx.image().bind(imageView, url, imageOptions, new Callback.CommonCallback() {...});\nx.image().loadDrawable(url, imageOptions, new Callback.CommonCallback() {...});\n// 用来获取缓存文件\nx.image().loadFile(url, imageOptions, new Callback.CommonCallback() {...});\n```\n\n----\n### 关于作者\n* Email： , \n* 有任何建议或者使用中遇到问题都可以给我发邮件, 你也可以加入QQ群：330445659(已满), 275967695, 257323060,\n384426013, 176778777, 169852490, 261053948, 330108003, 技术交流，idea分享 *_*","tags":["xUtils"],"categories":["软件开发"]},{"title":"Js利用百度地图API进行坐标转换","url":"/技术相关/Js利用百度API进行坐标转换/","content":"** 百度地图API for JavaScript的使用 **<Excerpt in index | 首页摘要>\n在Js中利用百度地图API对地理坐标系和投影坐标系（墨卡托）进行互转\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 导入js文件\n\n在html文件中添加\n\n```javascript\n<script src=\"http://api.map.baidu.com/api?v=1.2\"></script>\n```\n\n# 地理坐标转为平面坐标\n\n```javascript\nvar projection = new BMap.MercatorProjection();\nvar mercatorPoint = projection.lngLatToPoint(new BMap.Point(114.3908, 30.4879));\nalert(\"x = \" + mercatorPoint.x + \", y = \" + mercatorPoint.y);\n```\n\n# 平面坐标转为地理坐标\n\n```javascript\nvar projection = new BMap.MercatorProjection();\nvar lngLat = projection.pointToLngLat(new BMap.Pixel(12734064.16, 3544542.8));\nalert(\"lng = \" + lngLat.lng + \", lat = \" + lngLat.lat);\n```","tags":["JacaScript"],"categories":["技术相关"]},{"title":"夜跑助手App-路径规划的实现","url":"/软件开发/夜跑助手App-路径规划的实现/","content":"** [夜跑助手App](https://github.com/CS-Tao/Route-NightRun)路径规划的实现 ** <Excerpt in index | 首页摘要>\n    夜跑助手App是笔者参加某数据生产公司的地图制图大赛的成果之一，这里对其中的夜跑路径规划的方式进行记录。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 按站点进行路径规划\n\n## 原理和方法\n\n按站点进行路径规划的方式主要是利用[GraphHopper](https://www.graphhopper.com/)提供的WebAPI进行路径规划，通过对Rest接口发送Get请求获取json数据，如[示例](https://graphhopper.com/api/1/route?point=49.932707,11.588051&point=50.3404,11.64705&vehicle=car&debug=false&key=f8821850-c1f8-4f8f-befb-f976c887ebfb&optimize=true)。\n\n## 具体实现\n\n- 通过用户在手机屏幕上的双击操作获得用户希望经过的站点并进行标记\n- 在用户指定的站点链表的首位加上用户位置\n- 将上一步产生的站点列表投影为地理坐标\n- 生成http请求\n- 得到返回的json数据\n- 解析数据，此时便可得到路径信息\n- 将路径显示到屏幕上\n- 同时计算路径附近两百米形成的地理坐标框，发送http请求到我们自己的服务器\n- 得到饮品店信息并进行显示\n\n流程图如下：\n\n![流程图](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92.png)\n\n效果图如下：\n\n![App截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E8%A7%84%E5%88%92%E8%B7%AF%E5%BE%841.jpg)\n\n![App截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E8%A7%84%E5%88%92%E8%B7%AF%E5%BE%842.jpg)\n\n# 按路径长度进行路径规划\n\n## 原理和方法\n\n按路径长度进行路径规划相比于按站点的路径规划显得更加复杂，需要预定若干站点，并对符合预定要求的站点依次利用GraphHopper的Rest接口计算最短距离，接着得到与指定路径长度的一半最接近的距离和其对应的站点，最后通过GraphHopper得到最短路径。\n\n## 具体实现\n\n`注意：`夜跑区域的站点数据，由App维护人员通过其他软件采集并上传到数据库，软件已托管至[Github](https://github.com/CS-Tao/DataAcquisitionForNightRunning)。\n\n- 用户输入路径长度，设为a\n- 得到以用户为中心周围a/4到a/2区域内的所有站点\n- 依次利用GraphHopper的最短路径接口发送http请求，并获得用户位置到上一步所有站点的路径距离\n- 将这些距离值与与a/2比较，得到与a/2最接近的距离，并记录其对应的站点\n- 通过发送http请求获得用户位置到该站点的最短路径\n- 解析数据并显示路径\n- 显示附近的饮品店，和之前的方式一样，在此不详述\n\n流程图如下：\n\n![流程图](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92.png)\n\n效果图如下：\n\n![App截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%921.png)\n\n![App截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%922.png)\n\n# 结束语\n\n按指定站点进行路径规划得到的是环形回路，按指定路径长度得到的是一条供往返的线路。笔者思考了很久，最终采用了如上文叙述的方法进行按路径长度规划路径，如果您有更好的方法，无论是算法还是工具，希望您能在评论中指出，共同进步，非常感谢。","tags":["WebAPI"],"categories":["软件开发"]},{"title":"Ubuntu系统下的PostgreSQL安装和配置","url":"/技术相关/Ubuntu系统下的PostgreSQL安装和配置/","content":"** Ubuntu 16.04系统下的PostgreSQL 9.6安装和配置的详细步骤** <Excerpt in index | 首页摘要>\nPostgreSQL 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在 BSD-风格许可证下发行\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# PostgreSQL介绍\n\n[PostgreSQL](https://www.postgresql.org/)是以加州大学伯克利分校计算机系开发的 POSTGRES，现在已经更名为PostgreSQL，版本 4.2为基础的对象关系型数据库管理系统（ORDBMS），开发语言为C/C++。PostgreSQL支持大部分 SQL标准并且提供了许多其他现代特性：复杂查询、外键、触发器、视图、事务完整性、MVCC。同样，PostgreSQL 可以用许多方法扩展，比如， 通过增加新的数据类型、函数、操作符、聚集函数、索引。免费使用、修改、和分发 PostgreSQL，不管是私用、商用、还是学术研究使用。\n\n# PostgresSQL安装\n\n- 添加apt-repository\n    ```Bash\n    sudo add-apt-repository \"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main\"\n    ```\n- 载入apt-repository的签名\n    ```Bash\n    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\n    ```\n- 更新package列表\n    ```Bash\n    sudo apt-get update\n    ```\n- 通过apt-get工具安装PostgreSQL\n    ```Bash\n    apt-get install postgresql-9.6\n    ```\n\n# 配置PostgreSQL\n\n- 切换到postgres用户\n    ```Bash\n    sudo su postgres\n    ```\n- 登录到postgresql\n    ```Bash\n    psql postgres\n    ```\n    如果看到如下页面则说明之前的努力没有白费，已经安装成功了。<br>\n    ![Putty截图](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/PostgreSQL%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png)\n- 更改用户密码\n    在当前界面下输入\n    ```Bash\n    \\password\n    ```\n    输入你想设置的PostgreSQL密码。输入\\q回车退出。\n- 设置连接权限\n    - 打开配置文件\n        ```Bash\n        vim /etc/postgresql/9.1/main/postgresql.conf\n        ```\n    - 修改连接权限为所有主机\n        ```Bash\n        #listen_addresses = ‘localhost’改为 listen_addresses = ‘*’\n        ```\n        `注意：`需要去掉#号\n    - 启用密码验证\n        ```Bash\n        #password_encryption = on 改为 password_encryption = on\n        ```\n        `注意：`需要去掉#号\n- 设置用户ip段\n    - 打开配置文件\n        ```Bash\n        vim /etc/postgresql/9.1/main/pg_hba.conf\n        ```\n    - 在文件末尾添加如下内容\n        ```Bash\n        host all all 0.0.0.0/0 md5\n        ```\n        `注意：`0.0.0.0为地址段。0为掩码的二进制位，可取数值为0、8、16、24、32。md5为加密方式\n        `示例：`192.168.0.0/16代表192.168.0.1 ~ 192.168.255.254\n- 重启PostgreSQL服务\n    ```Bash\n    sudo service postgres restart\n    ```\n\n# 登录数据库\n\n- 本地登录\n    ```Bash\n    psql -U postgres -h 127.0.0.1\n    ```\n- 远程登录\n    ```Bash\n    psql -U postgres -h 远程IP地址\n    ```","tags":["Ubuntu"],"categories":["技术相关"]},{"title":"GMap.net for WPF 使用心得","url":"/软件开发/GMap.net-for-WPF-使用心得/","content":"** GMap.net for WPF** <Excerpt in index | 首页摘要>\n    利用GMap.net for WPF绘制点线面的方式以及未指定长宽的要素与其他要素间相对定位的方式\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## GMap.net概述\n\n[GMap.net](https://greatmaps.codeplex.com/ \"进入GMap.NET的项目地址\")是一个强大、免费、跨平台、开源的.NET控件，它在WinForm和WPF环境中能够通过Google, Yahoo!, Bing, OpenStreetMap, ArcGIS, Pergo, SigPac等实现寻找路径、地理编码以及地图展示功能，并支持缓存和运行在Mobile环境中。<br>GMap.NET是一个开源的GEO地图定位和跟踪程序。就像谷歌地图、雅虎地图一样，可以自动计算两地的距离，定位经纬度，与Google地图不同的是，该项目是建立在WinForm框架或WPF框架基础上的。可以对地图放大缩小，进行城市标记等。\n\n## GMap.net for WPF 绘制要素\n\n因为现在正在利用GMap.net for WPF写一个项目，所以我对WPF版本的GMap.net更加熟悉，如有错误或不当之处，还望指出，共同进步！\n\n* 不同于Winform版本，WPF版本没有图层的概念，但用于显示要素的对象GMapMarker提供了Zindex属性，该属性值大的会遮盖属性值小的。所以大家可以利用Zindex对地理要素建立逻辑上的图层关联。\n\n* WinForm版本绘图可以直接在显示对象上设置图形的属性，如：\n    ```C#\n    GMapPolygon polygon = new GMapPolygon(pointList, \"Polygon\")\n    {\n        IsHitTestVisible = true;\n        Fill = new SolidBrush(Color.FromArgb(50, Color.Red));\n        Stroke = new Pen(Color.Blue, 2);\n    }\n    overlay.Polygons.Add(polygon);\n    ```\n    对于wpf版本的点对象，可以直接指定显示用户控件，如：<br>\n    ```C#\n    GMapMarker marker = new GMapMarker(pointLatLng);\n    {\n        MyUserControl myUserControl = new MyUserControl()\n        marker.Shape = myUserControl;\n        marker.ZIndex = (int)LayerIndex.Point;\n        marker.Offset = new Point(-myUserControl.ActualWidth / 2, -myUserControl.ActualHeight / 2);\n    }\n    mapControl.Markers.Add(marker);\n    ```\n    其中MyUserControl可以重载自UserControl，并自定义显示内容。LayerIndex为自定义的枚举类型。mapControl重载自GMapControl。\n    但是wpf版本的线的属性设置需要重载GMapControl的CreateRoutePath方法，面的属性设置需要重载CreatePolygonPath方法。为了不影响原函数的内容，我们可以参考GMapControl的源代码[*GMapControl.cs*](https://greatmaps.codeplex.com/SourceControl/latest#GMap.NET.WindowsPresentation/GMap.NET.WindowsPresentation/GMapControl.cs \"查看源码文件\")文件。重载CreateRoutePath方法和CreatePolygonPath后的内容如下，只做了少量修改：\n\n    ```C#\n    /// <summary>\n    /// creates path from list of points, for performance set addBlurEffect to false\n    /// </summary>\n    /// <param name=\"pl\"></param>\n    /// <returns></returns>\n    public override Path CreateRoutePath(List<Point> localPath, bool addBlurEffect)\n    {\n        // Create a StreamGeometry to use to specify myPath.\n        StreamGeometry geometry = new StreamGeometry();\n\n        using (StreamGeometryContext ctx = geometry.Open())\n        {\n            ctx.BeginFigure(localPath[0], false, false);\n\n            // Draw a line to the next specified point.\n            ctx.PolyLineTo(localPath, true, true);\n        }\n\n        // Freeze the geometry (make it unmodifiable)\n        // for additional performance benefits.\n        geometry.Freeze();\n\n        // Create a path to draw a geometry with.\n        Path myPath = new Path();\n        {\n            // Specify the shape of the Path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            if (addBlurEffect)\n            {\n                BlurEffect ef = new BlurEffect();\n                {\n                    ef.KernelType = KernelType.Gaussian;\n                    ef.Radius = 0.0;\n                    ef.RenderingBias = RenderingBias.Performance;\n                }\n\n                myPath.Effect = ef;\n            }\n\n            myPath.Stroke = lineBrush;\n            myPath.StrokeThickness = lineWidth;\n            myPath.StrokeLineJoin = PenLineJoin.Round;\n            myPath.StrokeStartLineCap = PenLineCap.Triangle;\n            myPath.StrokeEndLineCap = PenLineCap.Round;\n\n            myPath.Opacity = lineOpacity;\n            myPath.IsHitTestVisible = false;\n        }\n        return myPath;\n    }\n    ```\n    `注意:`代码中lineBrush、lineWidth、lineOpacity为重载GMapControl时新添的公共字段。\n\n    ```C#\n    /// <summary>\n    /// creates path from list of points, for performance set addBlurEffect to false\n    /// </summary>\n    /// <param name=\"pl\"></param>\n    /// <returns></returns>\n    public override Path CreatePolygonPath(List<Point> localPath, bool addBlurEffect)\n    {\n        // Create a StreamGeometry to use to specify myPath.\n        StreamGeometry geometry = new StreamGeometry();\n\n        using (StreamGeometryContext ctx = geometry.Open())\n        {\n            ctx.BeginFigure(localPath[0], true, true);\n\n            // Draw a line to the next specified point.\n            ctx.PolyLineTo(localPath, true, true);\n        }\n\n        // Freeze the geometry (make it unmodifiable)\n        // for additional performance benefits.\n        geometry.Freeze();\n\n        // Create a path to draw a geometry with.\n        Path myPath = new Path();\n        {\n            // Specify the shape of the Path using the StreamGeometry.\n            myPath.Data = geometry;\n\n            if (addBlurEffect)\n            {\n                BlurEffect ef = new BlurEffect();\n                {\n                    ef.KernelType = KernelType.Gaussian;\n                    ef.Radius = 0.0;\n                    ef.RenderingBias = RenderingBias.Performance;\n                }\n\n                myPath.Effect = ef;\n            }\n\n            myPath.Stroke = polygonStrokeBrush;\n            myPath.StrokeThickness = polygonThickness;\n            myPath.StrokeLineJoin = PenLineJoin.Miter;\n            myPath.StrokeStartLineCap = PenLineCap.Triangle;\n            myPath.StrokeEndLineCap = PenLineCap.Square;\n\n            myPath.Fill = polygonFillBush;\n\n            myPath.Opacity = polygonOpacity;\n            myPath.IsHitTestVisible = false;\n        }\n        return myPath;\n    }\n    ```\n    `注意:`代码中polygonStrokeBrush、polygonThickness、polygonFillBush、polygonOpacity为重载GMapControl时新添的公共字段。\n* wpf版本只能绘制Point、PolyLine、Polygon三种图形，绘制圆则需要借助多边形的绘制。示例如下：\n    ```C#\n    public void DrawCircle(PointLatLng center, double R)\n    {\n        double cartesianCenterX = double.MaxValue;\n        double cartesianCenterY = double.MaxValue;\n        double cartesianCenterZ = double.MaxValue;\n\n        mapControl.MapProvider.Projection.FromGeodeticToCartesian(center.Lat, center.Lng, 0, out cartesianCenterX, out cartesianCenterY, out cartesianCenterZ);//将圆心投影到笛卡尔坐标系\n\n        int pointCount = 200;//用于拟合圆的多边形顶点个数\n\n        List<PointLatLng> polygonPointList = new List<PointLatLng>(pointCount);//用于存放多边形顶点\n\n        double interval = 2 * Math.PI / pointCount;\n        for (double degree = 0; degree < 2 * Math.PI; degree += interval)\n        {\n            double tempX = cartesianCenterX + R * Math.Cos(degree);\n            double tempY = cartesianCenterY + R * Math.Sin(degree);\n            double tempLng = double.MaxValue;\n            double tempLat = double.MaxValue;\n            mapControl.MapProvider.Projection.FromCartesianTGeodetic(tempX, tempY, cartesianCenterZ, out tempLat, out tempLng);//投影到WGS84坐标系\n            polygonPointList.Add(new PointLatLng(tempLat, tempLng));\n        }\n\n        GMapPolygon circle = new GMapPolygon(polygonPointList);\n        {\n            circle.ZIndex = (int)LayerIndex.Polygon;\n        }\n        mapControl.Markers.Add(circle);//添加到地图\n    }\n    ```\n    效果如下：\n    ![软件截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Wpf-Draw-Circle.png)<br>\n    因为投影问题，说好的圆变为了椭圆，如果想生成正圆，可以在程序中使用一些WebAPI服务替换GMap的投影服务，我们项目使用的是搭建在自己服务器上的的GeoServer服务。效果如下：\n    ![软件截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/FGIS-Damage-Circle.png)<br>\n    `备注：`两张图片截图自不同的程序。\n\n## 未指定长宽的要素与其他要素间相对定位的方式\n\n在使用GMap添加要素的时候，遇到需要对要素添加Tooltip，但不能指定Tooltip的长宽，且该要素与Tooltip需要水平中心对其，试过很多办法都不能成功，因为wpf控件的ActualWidth和ActualHeight属性必须加载过一次才能有正确的属性值，也就是说如果根据长宽计算GMapMarker的偏移量，Tolltip在第一次显示的时候无法正确定位，经过探索，最终利用wpf控件的SizeChanged响应函数实现了该效果，如果您有其他方法实现，希望能在评论中指出。效果如下：<br>\n![软件截屏](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Tooltip.png)\n\n```C#\npublic void AddIconWithTooltip(PointLatLng pll, Uri iconUri, string tooltip)\n{\n    Guid id = Guid.NewGuid();\n\n    //添加tooltip显示窗口\n    GMapMarker tooltipViewer = new GMapMarker(pll);\n    {\n        tooltipViewer.ZIndex = (int)LayerIndex.Point;\n        tooltipViewer.Tag = id;\n        TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);\n        tooltipViewer.Shape = content;\n        tooltipViewer.Shape.Visibility = Visibility.Hidden;\n    }\n    mapControl.Markers.Add(tooltipViewer);\n\n    UIElement shape = new MyIcon(new BitmapImage(iconUri), tooltipViewer);//构造函数：MyIcon(ImageSource image, GMapMarker iconTooltipViewer, double width = 22, double height = 22, bool showTipAlways = false)\n\n    GMapMarker iconMarker = new GMapMarker(pll);\n    {\n        iconMarker.ZIndex = (int)layerIndex;\n        iconMarker.Offset = new Point(-11, -11);\n        iconMarker.Tag = id;\n        iconMarker.Shape = shape;\n    }\n    mapControl.Markers.Add(iconMarker);\n}\n```\n\n`注意：`代码中id的作用是用于GMapMarker间的逻辑关联，方便同时从MapControl中移除。<br>\n关键代码：\n\n```C#\nTooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);\n```\n\n其中TooltipForMap类的SizeChanged函数如下：\n\n```C#\nprivate void TooltipForMap_SizeChanged(object sender, SizeChangedEventArgs e)\n{\n    _TooltipViewer.Offset = new Point(-ActualWidth / 2, -ActualHeight - 22);\n}\n```\n\n`注意：`_TooltipViewer和传入构造函数的tooltipViewer为同一实例。","tags":["GMap.net"],"categories":["软件开发"]},{"title":"团队项目中Github的使用","url":"/技术相关/团队项目中Github的使用/","content":"** 前几个月学习了Github的使用，希望我的经验能帮助到那些想要了解和学习Github的人** <Excerpt in index | 首页摘要>\n    本文将讲解团队项目中Github的基本使用，笔者的操作系统为Win10\n<!-- more -->\n<The rest of contents | 余下全文>\n\n# 前言\n\n[Github](https://github.com/)是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名GitHub。\ngitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。[百度百科](https://baike.baidu.com/item/github/10145341)\n\n# 创建仓库并提交、推送文件到远程仓库\n\n- 在本地操作系统上安装[git](https://git-scm.com/)，这是[下载页面](https://git-scm.com/downloads)，对于git的安装和配置，在此不做介绍。\n\n- 登录[Github](https://github.com/)并点击\"New repository\"按钮，新建远程仓库。\n\n![新建远程仓库](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/new.png)\n\n- 进入新建仓库页面，填写仓库信息，点击\"Create repository\"按钮，完成远程仓库的创建。\n\n![新建远程仓库](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/create.png)\n\n- 出现以下界面说明创建成功。\n\n![新建远程仓库](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/created.png)<br>\n`注意：`如果在上一个页面没有选择创建.gitignore、LICENSE、README.md等文件，可以之后添加。当前只有master分支（git的默认分支为master），您也可以点击上图中的\"Branch:master\"下拉按钮，新建分支。\n\n- 在本地新建文件夹，用于存放仓库，文件夹必须为空。在文件夹中按住Shift点击鼠标右键，点击\"在此处打开命令窗口\"，或直接点击鼠标右键点击\"Git Bash Here\"（如果没有该选项，则需找到git bash所在位置，启动bash，并导航进入本文件夹）。\n\n- 键入下面的命令初始化本地仓库。\n\n```Bash\ngit init\n```\n\n- 为本地仓库添加远程仓库。\n\n```Bash\ngit remote add origin https://github.com/CS-Tao/example.git\n```\n\n`注意：`该命令的格式为 \"git remote add 远程仓库的别名（方便记忆和键入） 远程仓库的url\"。\n\n- 拉取远程仓库并合并到本地仓库。\n\n```Bash\ngit pull origin master\n```\n\n`注意：`该命令的格式为 \"git pull 远程仓库的别名（或url） 希望拉取的分支\"。该命令会自动在本地仓库中创建master分支，另外，\"git pull\"命令相当于\"git fetch\"命令和\"git merge\"命令的集成，在此不再详述。\n\n- 这三个命令的效果如下。\n\n![建立本地仓库](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/first_pull.png)\n\n- 假如您现在在本项目文件夹中新建了\"NewFolder\"文件夹，并在文件夹中添加了source.cpp文件，您可以依次执行以下命令将新建的文件提交到远程仓库。\n\n```Bash\ngit add NewFolder/source.cpp\ngit commit -m \"Add source.cpp\"\ngit push origin master\n```\n\n`注意：`\n    1. 无论是新建文件，还是对文件做了修改，都可以键入类似的命令提交并推送文件。\n    2. 向库中添加文件的命令格式为，\"git add 文件或文件夹\"，不同文件或文件夹用空格隔开，添加文件夹时会把文件夹内部的所有文件一并添加。\n    3. 在执行\"git commit -m \"这次提交做了什么\"\"时，git会自动检测文件是否为新建文件或是否做了修改，并将新建或修改的文件或文件夹提交到本地仓库。\n    4. \"git push 远程仓库的别名（或url） 希望推送到的分支\"命令会将本地的提交推送到远程仓库。<br>\n![推送到远程](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/first_push.png)\n\n- 到此为止，本地仓库和远程仓库的视图如下。\n\n![本地仓库](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/folder.png)<br>\n![远程仓库](https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/github_addFile.png)\n\n# 新建本地分支并推送到远程\n\n敬请期待\n\n# fork团队组长的仓库并合并不同成员的提交\n\n敬请期待\n\n# 合并冲突的方法\n\n敬请期待","tags":["git"],"categories":["技术相关"]}]