<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CS-Tao · Blog</title>
  
  <subtitle>这是一个不能停留太久的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cs-tao.github.io/"/>
  <updated>2018-01-16T11:31:12.432Z</updated>
  <id>https://cs-tao.github.io/</id>
  
  <author>
    <name>CS-Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人独立主页与Hexo博客的集成</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E4%B8%BB%E9%A1%B5%E4%B8%8EHexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%9B%86%E6%88%90/"/>
    <id>https://cs-tao.github.io/技术相关/个人独立主页与Hexo博客的集成/</id>
    <published>2018-01-16T10:38:50.000Z</published>
    <updated>2018-01-16T11:31:12.432Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写网页的时候，发现了一个很不错的基于Canvas的樱花飘落背景，于是想着怎么把它做成主页嵌入到自己的博客中，最开始笔者是用Github小号建立的Github Pages对该主页进行托管，然后把网页中的所有链接都指向我大号的Github Pages的相关链接。<br>之后为了代码的通用性，我将该主页改造成了ejs模板，并利用<a href="https://github.com/shennan/ejs-on-command" target="_blank" rel="noopener">ejs-on-command</a>工具将其进行渲染为html，也是为了代码的通用性，我开始研究如何把这两个Github Pages融合为一个，也就是本篇文章将要讲解的内容：如何把个人独立的主页集成到Hexo博客中并利用命令<code>Hexo d</code>推送到Github Pages。以<a href="http://home.cs-tao.cc/" target="_blank" rel="noopener">我的主页</a>为例，<a href="https://github.com/CS-Tao/homepage" target="_blank" rel="noopener">主页源码链接</a>。<br><a id="more"></a></p><h3 id="Hexo博客配置"><a href="#Hexo博客配置" class="headerlink" title="Hexo博客配置"></a>Hexo博客配置</h3><ul><li><p>为了实现个人主页和博客的兼容，需要修改Hexo主配置文件中的<code>root、url、public_dir</code>的值，比如我的（这样配置后便可以将原博客的源码移动到<code>public/blog/</code>文件夹下，博客访问链接变为了<code>&lt;原网站链接&gt;/blog/</code>）：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">https://cs-tao.github.io/blog/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public/blog/</span></span><br></pre></td></tr></table></figure></li><li><p>修改hexo-deployer-git工具<br>  我对hexo-deployer-git工具做了一些修改，在兼容原hexo-deployer-git工具的基础上，添加了<code>deploy.punlic_dir</code>配置，若未指定该配置，就直接使用<code>public_dir</code>配置的值。如果不对该工具做修改，在执行hexo g命令的时候hexo会将博客发布到<code>public_dir</code>配置对应的文件夹下，而在执行命令<code>hexo d</code>的时候，我们需要将整个public文件夹发布到远程，这时候需要指定<code>deploy.punlic_dir</code>的值，比如我的deploy配置：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/CS-Tao/CS-Tao.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  public_dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>  修改之后的hexo-deployer-git请到<a href="https://github.com/CS-Tao/hexo-deployer-git" target="_blank" rel="noopener">https://github.com/CS-Tao/hexo-deployer-git</a>下载，下载后替换掉Hexo博客根目录下的<code>node_modules\hexo-deployer-git</code>即可。</p></li><li>删除原<code>public</code>文件夹中的内容，将主页源码放入<code>public</code>文件夹</li><li>生成博客并推送到Github  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="https://github.com/CS-Tao/CS-Tao.github.io" target="_blank" rel="noopener">博客源码链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写网页的时候，发现了一个很不错的基于Canvas的樱花飘落背景，于是想着怎么把它做成主页嵌入到自己的博客中，最开始笔者是用Github小号建立的Github Pages对该主页进行托管，然后把网页中的所有链接都指向我大号的Github Pages的相关链接。&lt;br&gt;之后为了代码的通用性，我将该主页改造成了ejs模板，并利用&lt;a href=&quot;https://github.com/shennan/ejs-on-command&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ejs-on-command&lt;/a&gt;工具将其进行渲染为html，也是为了代码的通用性，我开始研究如何把这两个Github Pages融合为一个，也就是本篇文章将要讲解的内容：如何把个人独立的主页集成到Hexo博客中并利用命令&lt;code&gt;Hexo d&lt;/code&gt;推送到Github Pages。以&lt;a href=&quot;http://home.cs-tao.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的主页&lt;/a&gt;为例，&lt;a href=&quot;https://github.com/CS-Tao/homepage&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;主页源码链接&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="github" scheme="https://cs-tao.github.io/tags/github/"/>
    
      <category term="Hexo" scheme="https://cs-tao.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>江城 初雪</title>
    <link href="https://cs-tao.github.io/%E9%9A%8F%E7%AC%94/%E6%B1%9F%E5%9F%8E-%E5%88%9D%E9%9B%AA/"/>
    <id>https://cs-tao.github.io/随笔/江城-初雪/</id>
    <published>2018-01-04T08:32:46.000Z</published>
    <updated>2018-01-06T11:55:08.056Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E9%9B%AA-%E6%98%9F%E6%B9%96.jpg" width="65%" height="65%"></p><p>今天朋友们都很兴奋，因为听说一会要下雪，不会很大，但从宿舍窗外望去，并没有要下雪的迹象，感觉一直在下雨。<br><br>下午吃完饭，天空还是飘起了不大不小的雪花，风很大，突然很伤感，于是给家人打了个电话报以问候，电话那头好像很热闹，听说也还没开始下雪。<br><a id="more"></a></p><hr><p>已经在武汉待了两年半，对于武汉的雪，我印象最深的还是我们大一第一学期的班聚，那时候所有的考试都结束了，我们在鲁磨路附近的一栋别墅里庆祝，无忧无虑，玩得很开心，那次班聚好像是和其他班联谊的，和哪个班我就记不清楚了。<br><br>那天我们发誓要玩一整晚，结果没有一个人遵守誓言。第二天早上，我们各自懒散地起床，打开别墅的门，看到门外白茫茫的一片。一行人就在这样的雪景中溜达到了公交站，我们一路上聊着、笑着，回到了武大。<br><br>银装素裹下的武大特别美，趁着雪景，把武大的各个角落逛了一遍，拍了很多照片。不知道现在的我还有没有那样的闲情逸致。</p><hr><p>每年一下雪就会想听许嵩的《断桥残雪》，歌有些老了，每每听到都会莫名的伤感。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=167937&auto=0&height=66"></iframe><blockquote><p>那年一个人坐了20多小时火车专门跑去西湖看一眼断桥，全是人，没有雪。</p><p align="right">—— <a href="http://music.163.com/#/song?id=167937" target="_blank" rel="noopener">网易云音乐</a></p><p></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E9%9B%AA-%E6%98%9F%E6%B9%96.jpg&quot; width=&quot;65%&quot; height=&quot;65%&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天朋友们都很兴奋，因为听说一会要下雪，不会很大，但从宿舍窗外望去，并没有要下雪的迹象，感觉一直在下雨。&lt;br&gt;&lt;br&gt;下午吃完饭，天空还是飘起了不大不小的雪花，风很大，突然很伤感，于是给家人打了个电话报以问候，电话那头好像很热闹，听说也还没开始下雪。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://cs-tao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="https://cs-tao.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>一部致郁系暗黑童话</title>
    <link href="https://cs-tao.github.io/%E9%9A%8F%E7%AC%94/%E4%B8%80%E9%83%A8%E8%87%B4%E9%83%81%E7%B3%BB%E6%9A%97%E9%BB%91%E7%AB%A5%E8%AF%9D/"/>
    <id>https://cs-tao.github.io/随笔/一部致郁系暗黑童话/</id>
    <published>2017-12-20T11:37:46.000Z</published>
    <updated>2018-01-04T12:53:12.687Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 《被遗忘的孩子 The Forgotten Child》</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/poster.jpg" alt="宣传海报" width="60%" height="60%"></p><p>这部影片讲述的是一个关于自由、人性和责任的故事。荣获了第31届西班牙戈雅奖最佳动画片奖，但和其他获奖影片不同的是，《被遗忘的孩子》中并没有出现快乐美好的结局。</p><p>在一座和外界隔绝的小岛上，住着一群人形动物，生活平静，但就在不算很久以前，小岛上的工厂发生了爆炸，原本和谐的生活被彻底打破，小岛被严重污染，岛上大部分地方被垃圾覆盖，生存在垃圾堆里的人们，靠捡铜换钱为生，游离在社会的边缘，岛上没被污染的地方，人们过着很好的生活。</p><p>很多人想逃离小岛，去到大海的另一头，但直到最后，也没有谁逃离了这个小岛，岛上唯一具有飞行能力，能飞到外面世界去的鸟孩，却身兼使命，需要把橡树种子撒满小岛，让小岛重现生机。</p><p>小岛上每个人的心里都住着恶魔，人性黑暗的一面被完全展现了出来。这部不到75分钟的影片中，充满了许多对现实世界的隐喻，影片的主题最后在小老鼠的日志中表达了出来：没有什么会按照计划来。<br><a id="more"></a></p><hr><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E7%99%BD%E9%BC%A0%E5%85%84%E5%BC%9F.png" alt="白鼠兄弟" width="50%" height="50%"></p><p>影片开始是白鼠兄弟在垃圾场捡铜，对它们来说，铜就是血液，是他们生活的根本，在这个垃圾场生存的人们，需要表现出他们最凶狠的一面，和其他人争夺垃圾场的主权。鼠弟希望能去不远处的灯塔看看，但哥哥知道，那里面没有他们要的东西，为了生存，他们没有自由，只能不断捡铜。影片之后，白鼠兄弟遇见了黑鼠兄弟，双方大打出手，小黑鼠杀死了鼠弟，哥哥杀死了大黑鼠，也是为了生存，哥哥必须和小黑鼠共同生活，尽管对方刚杀死了自己至亲的人。</p><hr><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E7%8C%AA%E5%BC%9F.png" alt="猪弟" width="50%" height="50%"></p><p>猪弟靠钓鱼为生，但环境日益恶化，鱼也越来越少，猪弟想等到他妈妈死后便离开这个岛，猪妈妈沉迷吸毒，每天以母爱的名义要求猪弟给她注射毒品，以至于她经常进入迷幻的状态，整个人完全被内深处的恶魔控制，在她清醒的时候，嘴里喃喃道“杀了它”，这个“它”也就是猪妈妈自己。最后猪弟亲手结束了她的生命，但猪弟已经没有了离开这个岛的欲望。</p><hr><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E9%BC%A0%E5%A6%B9.png" alt="鼠妹" width="50%" height="50%"></p><p>鼠妹生活在一个条件较为优越的家庭，父亲很早就离开了她，妈妈改嫁，鼠妹在家里做什么都不受待见，她想和朋友们还有心上人鸟孩一起离开这个岛，她和朋友三人偷钱去垃圾场找克劳斯买船，因为钱太少只能买一只充气鸭，准备离开的时候被在垃圾场生活的老鼠们抓住，她的一个朋友被刀割瞎了一只眼睛，面对他们的是死亡的宣判。宣判前老鼠们中邪了一般齐呼：“我们是孤儿，我们是被遗忘的孩子，我们没有未来，我们现在在垃圾堆里，鲜血是我们的法则”。得知鼠妹有难的鸟孩唤醒了心中的恶魔，及时赶来，杀死了其他人，烧毁了整个垃圾场，然后鼠妹和她的朋友们坐上充气船，准备去往大海的另一边。但海上天气太差，船最终沉入了海底，三人游回了小岛。</p><hr><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E5%85%94%E5%A6%B9.png" alt="兔妹" width="50%" height="50%"></p><p>鼠妹的好朋友兔妹，内心深处总有恶魔怂恿她做坏事，还好直到最后兔妹也没有做什么伤天害理的事情。仔细想想，这么一个普通的角色，不就是我们最好的缩影吗，每个人内心深处都有善的一面，也有恶的一面，只是我们愿意展现给世人的，是善的一面罢了。</p><hr><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E9%B8%9F%E5%AD%A9.png" alt="鸟孩" width="50%" height="50%"></p><p>鸟孩是本部影片的主角，靠吸毒保持自己飞翔的能力，但吸毒也使他内心深处的恶魔越来越强大，鼠妹希望能和他一起离开这个小岛，但鸟孩是这个岛上唯一有飞行能力的人形动物，他得继承父亲的遗志，将橡树种子撒满小岛，让小岛恢复以前的模样。小岛上的士兵一直认为鸟孩和他的父亲在岛上散布毒品，下令通缉，鸟孩的父亲就死在老士兵的枪下，老士兵一直以此为荣，最后小士兵的子弹射穿了鸟孩的心脏，老士兵很欣慰，但从小士兵的脸上能看到的却只有迷茫。鸟孩死了，影片结尾他的灵魂带领鼠妹找到了橡树种子的来源地，有无数的灵魂在这里自由地飞舞，鸟孩生前没有自由，死亡却将自由带给了他，这应该是这部影片唯一让我们聊以慰藉的地方了。</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/%E7%BB%93%E5%B0%BE.png" width="50%" height="50%"></p><hr><p>影片中的隐喻太多，涉及个人、亲情、朋友、社会以及宗教，寓意之深，实在难以深入描述。</p><hr><blockquote><p>温馨提醒：本片片风惊悚、诡异，胆小慎看。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 《被遗忘的孩子 The Forgotten Child》&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/the_forgotten_child/poster.jpg&quot; alt=&quot;宣传海报&quot; width=&quot;60%&quot; height=&quot;60%&quot;&gt;&lt;/p&gt;
&lt;p&gt;这部影片讲述的是一个关于自由、人性和责任的故事。荣获了第31届西班牙戈雅奖最佳动画片奖，但和其他获奖影片不同的是，《被遗忘的孩子》中并没有出现快乐美好的结局。&lt;/p&gt;
&lt;p&gt;在一座和外界隔绝的小岛上，住着一群人形动物，生活平静，但就在不算很久以前，小岛上的工厂发生了爆炸，原本和谐的生活被彻底打破，小岛被严重污染，岛上大部分地方被垃圾覆盖，生存在垃圾堆里的人们，靠捡铜换钱为生，游离在社会的边缘，岛上没被污染的地方，人们过着很好的生活。&lt;/p&gt;
&lt;p&gt;很多人想逃离小岛，去到大海的另一头，但直到最后，也没有谁逃离了这个小岛，岛上唯一具有飞行能力，能飞到外面世界去的鸟孩，却身兼使命，需要把橡树种子撒满小岛，让小岛重现生机。&lt;/p&gt;
&lt;p&gt;小岛上每个人的心里都住着恶魔，人性黑暗的一面被完全展现了出来。这部不到75分钟的影片中，充满了许多对现实世界的隐喻，影片的主题最后在小老鼠的日志中表达了出来：没有什么会按照计划来。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://cs-tao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="https://cs-tao.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>关系数据库中的范式</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%8C%83%E5%BC%8F/"/>
    <id>https://cs-tao.github.io/技术相关/关系数据库中的范式/</id>
    <published>2017-12-19T12:20:31.000Z</published>
    <updated>2018-01-16T10:46:47.906Z</updated>
    
    <content type="html"><![CDATA[<p>最近在复习备考《空间数据库》的时候，偶然发现了范式（Normal Form）这一词语，才意识到，当初数据库课上的内容已经忘得差不多了。</p><p>关系数据库的范式是对数据库中关系模式标准级别的描述，符合高一级的范式的关系模式一定符合低一级的范式。目前关系模式的范式一共分为8个级别，由低到高依次为第一范式（1NF），第二范式（2NF），第三范式（3NF），巴斯-科德范式（BCNF），第四范式（4NF），第五范式（5NF，又称完美范式），DK范式，第六范式（目前最高的范式）。我们一般的数据库满足第三范式即可。本文对第一范式到第五范式做一点简单的记录。<br><a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h1><p>属性不可再分，即所有属性均具有原子性。</p><p>它的一个必要条件是属性定长。</p><h1 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h1><p>在满足第一范式的基础上，需满足该关系模式必须有主键，而且所有的非主属性不能部分依赖于主键。</p><p>主键由一个或多个主属性（即多列）组成，其他所有属性必须由主键的所有属性唯一确定，不能存在由主键的某部分属性便能确定的列，即非主属性必须完全依赖于主键。</p><blockquote><p>比如，高中我在班上的学号为13，如果有一张表</p><table><thead><tr><th style="text-align:center">班级</th><th style="text-align:center">学号</th><th style="text-align:center">姓名</th><th style="text-align:center">班主任</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>这张表的主键为（班级，学号），那么我们可以看到，[姓名]由[班级]和[学号]唯一确定是没问题的，而且仅由[班级]或[学号]是无法确定姓名的，然而[班主任]却只由[班级]唯一确定，即[班主任]仅部分依赖于主键（班级，学号），不符合第二范式。应将原表拆分为</p><table><thead><tr><th style="text-align:center">班级</th><th style="text-align:center">学号</th><th style="text-align:center">姓名</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>和</p><table><thead><tr><th style="text-align:center">班级</th><th style="text-align:center">班主任</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table></blockquote><h1 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h1><p>在满足第二范式的基础上，需满足非主属性不传递依赖于主键。</p><p>非主属性不能完全依赖于另外一个或多个非主属性，也就是说，非主属性必须完全依赖于主键，而不是通过其他非主属性传递依赖于主键。</p><blockquote><p>比如，我大学在学校的学号为123456789，如果有一张表</p><table><thead><tr><th style="text-align:center">学号</th><th style="text-align:center">院系</th><th style="text-align:center">班级</th><th style="text-align:center">姓名</th><th style="text-align:center">班主任</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>这张表的主键为[学号]，[班主任]依赖于[院系]和[班级]，由于[院系]和[班级]不是主属性，所以该关系模式不符合第三范式。应将原表拆分为</p><table><thead><tr><th style="text-align:center">学号</th><th style="text-align:center">院系</th><th style="text-align:center">班级</th><th style="text-align:center">姓名</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>和</p><table><thead><tr><th style="text-align:center">院系</th><th style="text-align:center">班级</th><th style="text-align:center">班主任</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table></blockquote><h1 id="巴斯-科德范式（BCNF）"><a href="#巴斯-科德范式（BCNF）" class="headerlink" title="巴斯-科德范式（BCNF）"></a>巴斯-科德范式（BCNF）</h1><p>在满足第三方式的基础上，需满足任何属性不传递依赖于主键。</p><p>与第三范式对比我们可以发现，第三方式只对非主属性做了约束，而BC范式对所有属性做了约束。所有属性不能完全依赖于其他一个或多个非主属性，所有属性必须完全依赖于主键，不能通过其他非主属性传递依赖于主键。</p><blockquote><p>如下表，其中学号为某一研究方向下的学号，一个研究方向下有多位导师</p><table><thead><tr><th style="text-align:center">研究方向</th><th style="text-align:center">学生学号</th><th style="text-align:center">导师</th><th style="text-align:center">平均成绩</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>主键为[研究方向]和[学号]。导师需要由[研究方向]和该方向下的[学生学号]确定，平均成绩也需要[研究方向]和[学生学号]确定，满足第二范式。非主属性[导师]和[平均成绩]没有依赖关系，满足第三范式。但主属性[研究方向]依赖于[导师]，当[导师]确定了，[研究方向]也就确定了。换句话说，属性[研究方向]完全依赖于非主属性[导师]，不符合BC范式。原表应拆分为</p><table><thead><tr><th style="text-align:center">研究方向</th><th style="text-align:center">学生学号</th><th style="text-align:center">平均成绩</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>和</p><table><thead><tr><th style="text-align:center">导师</th><th style="text-align:center">研究方向</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table></blockquote><h1 id="第四范式（4NF）"><a href="#第四范式（4NF）" class="headerlink" title="第四范式（4NF）"></a>第四范式（4NF）</h1><p>在满足BC范式的基础上，关系模型不能存在多值依赖。</p><p>多值依赖是指如果给定了A属性，B、C两个属性就得确定。那么如果A确定了，但B未确定，就不能插入数据。第四方式规定关系模型中不能出现多值依赖的情况。</p><h1 id="第五范式（5NF，完美范式）"><a href="#第五范式（5NF，完美范式）" class="headerlink" title="第五范式（5NF，完美范式）"></a>第五范式（5NF，完美范式）</h1><p>在满足第四范式的基础上，需将表分解为逻辑上不同主键的表。主要是为了排除表中的所有冗余。</p><p>第五范式消除了第四范式表的连接依赖。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在复习备考《空间数据库》的时候，偶然发现了范式（Normal Form）这一词语，才意识到，当初数据库课上的内容已经忘得差不多了。&lt;/p&gt;
&lt;p&gt;关系数据库的范式是对数据库中关系模式标准级别的描述，符合高一级的范式的关系模式一定符合低一级的范式。目前关系模式的范式一共分为8个级别，由低到高依次为第一范式（1NF），第二范式（2NF），第三范式（3NF），巴斯-科德范式（BCNF），第四范式（4NF），第五范式（5NF，又称完美范式），DK范式，第六范式（目前最高的范式）。我们一般的数据库满足第三范式即可。本文对第一范式到第五范式做一点简单的记录。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="数据库" scheme="https://cs-tao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>2017-12-12记</title>
    <link href="https://cs-tao.github.io/%E9%9A%8F%E7%AC%94/2017-12-12%E8%AE%B0/"/>
    <id>https://cs-tao.github.io/随笔/2017-12-12记/</id>
    <published>2017-12-12T01:40:29.000Z</published>
    <updated>2018-01-04T12:53:12.559Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/2016-08-02_%E5%AE%B6%E4%B9%A1%E7%9A%84%E8%AE%B0%E5%BF%86.jpg" width="60%" height="60%"></p><p>生命本是一场漂泊的漫旅，走过的每一个地方，遇见的每一个人，或许终将成为驿站，成为过客。总喜欢追忆，喜欢眷恋，才发现，那些曾经以为恋恋不忘的事，就在我们恋恋不忘的过程中，已慢慢淡忘。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/2016-08-02_%E5%AE%B6%E4%B9%A1%E7%9A%84%E8%AE
      
    
    </summary>
    
      <category term="随笔" scheme="https://cs-tao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="https://cs-tao.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>远程git仓库的建立和配置</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://cs-tao.github.io/技术相关/远程git仓库的建立和配置/</id>
    <published>2017-12-11T09:11:21.000Z</published>
    <updated>2018-01-16T10:41:00.710Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 远程git仓库的建立和配置</strong> <excerpt in="" index="" |="" 首页摘要=""><br>本篇博文主要介绍如何建立远程git仓库以及如何在gitweb页面中显示仓库的描述信息，以Ubuntu 16.04 LTS操作系统为例。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="安装并配置gitweb"><a href="#安装并配置gitweb" class="headerlink" title="安装并配置gitweb"></a>安装并配置gitweb</h1><p>参考<a href="http://blog.cs-tao.cc/2017/10/19/gitweb%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">基于Apache服务器的gitweb安装和配置</a></p><h1 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h1><p>为了能在gitweb上查看仓库的信息，建议在gitweb的仓库根目录下新建文件夹（仓库根目录在gitweb的配置文件”/etc/gitweb.conf”中由”$projectroot”变量指定）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir Test.git</span><br></pre></td></tr></table></figure><p>git远程库目录建议带上.git后缀。</p><h1 id="更改文件夹权限并切换到用于远程ssh连接的用户"><a href="#更改文件夹权限并切换到用于远程ssh连接的用户" class="headerlink" title="更改文件夹权限并切换到用于远程ssh连接的用户"></a>更改文件夹权限并切换到用于远程ssh连接的用户</h1><p>因为我们用于连接私有git仓库的方法是ssh远程连接，我们以有远程ssh登录权限的用户’CSTao’为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R CSTao:CSTao Test.git</span><br><span class="line">su CSTao</span><br></pre></td></tr></table></figure><blockquote><p>注意：本步骤和第一步的顺序可以交换，那么便可以不使用chown命令更改文件夹权限，只切换用户即可。笔者这样做的原因是我新建的文件夹所在目录的权限不属于用户CSTao，以CSTao用户新建文件夹会出现权限不足的警告。</p></blockquote><h1 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h1> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Test.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p> 和建立本地仓库的命令不一样的是，建立远程仓库其实建立了一个裸仓库，也就是不含文件信息，只有git的提交记录。</p><h1 id="配置描述信息"><a href="#配置描述信息" class="headerlink" title="配置描述信息"></a>配置描述信息</h1><h2 id="修改描述文件"><a href="#修改描述文件" class="headerlink" title="修改描述文件"></a>修改描述文件</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim description</span><br></pre></td></tr></table></figure><p> 写入描述信息即可</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure><p> 在原有内容后添加<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[gitweb]</span><br><span class="line">        owner = CSTao &lt;whucstao@qq.com&gt;</span><br><span class="line">        URL = ssh://CSTao@39.108.171.209:22/home/git/repositories/Test.git</span><br></pre></td></tr></table></figure></p><p> 通过owner指定gitweb中owner的显示内容，通过URL指定gitweb中URL的显示内容，基本格式为”ssh://[ssh登录的用户名]@[host:ssh端口][远程主机中的仓库目录]”</p><h1 id="将远程裸仓库克隆到本地"><a href="#将远程裸仓库克隆到本地" class="headerlink" title="将远程裸仓库克隆到本地"></a>将远程裸仓库克隆到本地</h1><p> 在本地计算机的特定文件夹中执行：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://CSTao@39.108.171.209:22/home/git/repositories/Test.git</span><br></pre></td></tr></table></figure></p><h1 id="添加文件、提交更改、推送到远程"><a href="#添加文件、提交更改、推送到远程" class="headerlink" title="添加文件、提交更改、推送到远程"></a>添加文件、提交更改、推送到远程</h1><p>这部分内容为git的基本操作，不再详述</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 远程git仓库的建立和配置&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;本篇博文主要介绍如何建立远程git仓库以及如何在gitweb页面中显示仓库的描述信息，以Ubuntu 16.04 LTS操作系统为例。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="gitweb" scheme="https://cs-tao.github.io/tags/gitweb/"/>
    
      <category term="git" scheme="https://cs-tao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>gitweb安装和配置</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/gitweb%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://cs-tao.github.io/技术相关/gitweb安装和配置/</id>
    <published>2017-10-19T07:35:55.000Z</published>
    <updated>2018-01-16T10:46:47.906Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 基于Apache服务器的gitweb安装和配置</strong> <excerpt in="" index="" |="" 首页摘要=""><br>gitweb需要使用的配置文件的位置和功能。操作系统：Ubuntu 16.04 LTS<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="gitweb安装和配置（在前人的基础上做了一些添加和修改）"><a href="#gitweb安装和配置（在前人的基础上做了一些添加和修改）" class="headerlink" title="gitweb安装和配置（在前人的基础上做了一些添加和修改）"></a>gitweb安装和配置（在前人的基础上做了一些添加和修改）</h1><p><a href="http://blog.csdn.net/qq_25667339/article/details/53083968" target="_blank" rel="noopener">原文地址</a></p><h2 id="安装gitweb和Apache"><a href="#安装gitweb和Apache" class="headerlink" title="安装gitweb和Apache"></a>安装gitweb和Apache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitweb apache2</span><br></pre></td></tr></table></figure><h2 id="修改-etc-gitweb-conf"><a href="#修改-etc-gitweb-conf" class="headerlink" title="修改/etc/gitweb.conf"></a>修改/etc/gitweb.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitweb.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$projectroot</span> = <span class="string">"/home/git/repositories"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$git_temp</span> = <span class="string">"/tmp"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$projects_list</span> = <span class="variable">$projectroot</span>;</span><br><span class="line"></span><br><span class="line">@stylesheets = (<span class="string">"../gitweb/static/gitweb.css"</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$javascript</span> = <span class="string">"../gitweb/static/gitweb.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$logo</span> = <span class="string">"../gitweb/static/git-logo.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$favicon</span> = <span class="string">"../gitweb/static/git-favicon.png"</span>;</span><br><span class="line"></span><br><span class="line">@diff_opts = ();</span><br></pre></td></tr></table></figure><p>保存退出</p><h2 id="修改-etc-apache2-conf-available-gitweb-conf"><a href="#修改-etc-apache2-conf-available-gitweb-conf" class="headerlink" title="修改/etc/apache2/conf-available/gitweb.conf"></a>修改/etc/apache2/conf-available/gitweb.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apache2/conf-available/gitweb.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Alias /gitweb /usr/share/gitweb</span><br><span class="line"><span class="tag">&lt;<span class="name">Directory</span> /<span class="attr">usr</span>/<span class="attr">share</span>/<span class="attr">gitweb</span>&gt;</span></span><br><span class="line">    Options +FollowSymLinks +ExecCGI</span><br><span class="line">    AddHandler cgi-script .cgi</span><br><span class="line">    AuthType Basic</span><br><span class="line">    AuthName "Restricted Content"</span><br><span class="line">    AuthUserFile /home/git/.htpasswd</span><br><span class="line">    Require valid-user</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存退出</p><p><code>注意：</code>“AuthUserFile”是认证文件位置，用如下命令生成认证文件并添加一个访问用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c 认证文件位置 用户名</span><br></pre></td></tr></table></figure><p>然后根据提示输入密码即可。</p><h2 id="使cgi生效"><a href="#使cgi生效" class="headerlink" title="使cgi生效"></a>使cgi生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod cgi</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><h2 id="访问gitweb"><a href="#访问gitweb" class="headerlink" title="访问gitweb"></a>访问gitweb</h2><p>如果搭建在本地，访问<a href="http://localhost/gitweb" target="_blank" rel="noopener">http://localhost/gitweb</a>并登录就可看到gitweb设置的git库根目录下的所有项目信息。</p><p>但此时访问<a href="localhost/cgi-bin/gitweb.cgi">http://localhost/cgi-bin/gitweb.cgi</a>不用登录也能访问到项目信息。笔者直接删除了”/usr/lib/cgi-bin/“文件夹中与gitweb相关的文件。其他人便不能通过该路径访问。</p><h2 id="配置布局"><a href="#配置布局" class="headerlink" title="配置布局"></a>配置布局</h2><p>可以使用别人已经写好的布局和图标，详见<a href="https://github.com/kogakure/gitweb-theme" target="_blank" rel="noopener">github</a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>需要将”/usr/share/gitweb”文件夹下的文件和文件夹设置正确的权限，&lt;其他用户&gt;必须有读取文件权限和执行文件权限。缺少读文件的权限服务器会返回”Internal Server Error(500)”错误，缺少执行文件的权限服务器会返回”Forbidden(403)”错误。读取文件权限为4，执行文件权限为1，也就是说&lt;其他用户&gt;的权限至少为’5’。如下，笔者设置的’755’权限的最后一个’5’对应&lt;其他用户&gt;的权限。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/gitweb/</span><br><span class="line">sudo chmod -R 755 .</span><br></pre></td></tr></table></figure></li><li><p>旧版本Apache的/etc/apache2/conf.d/gitweb和新版本的/etc/apache2/conf-available/gitweb的是同一个目录。</p></li></ul><h1 id="配置文件备忘"><a href="#配置文件备忘" class="headerlink" title="配置文件备忘"></a>配置文件备忘</h1><h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><ul><li>文件位置：”/etc/gitweb.conf”</li><li>文件功能：设置项目集根目录、临时文件目录、布局文件位置及资源文件位置等。</li></ul><h2 id="Apache中gitweb的配置"><a href="#Apache中gitweb的配置" class="headerlink" title="Apache中gitweb的配置"></a>Apache中gitweb的配置</h2><ul><li>文件位置：”/etc/apache2/conf-available/gitweb.conf”</li><li>文件功能：指定CGI文件位置、认证文件位置等。</li><li>主要内容：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfDefine</span> <span class="attr">ENABLE_GITWEB</span>&gt;</span></span><br><span class="line">    Alias /gitweb /usr/share/gitweb</span><br><span class="line">    <span class="tag">&lt;<span class="name">Directory</span> /<span class="attr">usr</span>/<span class="attr">share</span>/<span class="attr">gitweb</span>&gt;</span></span><br><span class="line">        Options +FollowSymLinks +ExecCGI</span><br><span class="line">        AddHandler cgi-script .cgi</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName "Restricted Content"</span><br><span class="line">        AuthUserFile /home/git/.htpasswd</span><br><span class="line">        Require valid-user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">IfDefine</span>&gt;</span></span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 基于Apache服务器的gitweb安装和配置&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;gitweb需要使用的配置文件的位置和功能。操作系统：Ubuntu 16.04 LTS&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="gitweb" scheme="https://cs-tao.github.io/tags/gitweb/"/>
    
      <category term="Apache" scheme="https://cs-tao.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>解决C#发送电子邮件失败的问题</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E8%A7%A3%E5%86%B3C-%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cs-tao.github.io/技术相关/解决C-发送电子邮件失败的问题/</id>
    <published>2017-10-18T00:21:15.000Z</published>
    <updated>2018-01-16T10:40:57.287Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 解决C#-WPF桌面软件发送电子邮件失败的问题</strong> <excerpt in="" index="" |="" 首页摘要=""><br>    C#发送邮件的方法在网上搜一下可以找到很多，几个小时过去了还是没能实现，对比了很多人写的博客，笔者最终找到了问题所在，并在此记录。<br><a id="more"></a></excerpt></p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ul><li>配置App.Config文件<ul><li>在项目中添加<code>System.Configuration</code>程序集的引用</li><li>在App.Config文件中添加键值，如下（只需要关注appSettings标签内的内容）</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"entityFramework"</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=*************"</span> <span class="attr">requirePermission</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">"v4.0"</span> <span class="attr">sku</span>=<span class="string">".NETFramework,Version=v4.5.2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--邮箱--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_NUM"</span> <span class="attr">value</span>=<span class="string">"123456789@qq.com"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--邮箱密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_PASSWORD"</span> <span class="attr">value</span>=<span class="string">"邮箱密码。QQ邮箱需要许可码"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--邮件显示名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_NAME"</span> <span class="attr">value</span>=<span class="string">"发送邮件使用的用户名"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--QQ邮箱对应的SMTP服务器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"SmtpClient_HOST"</span> <span class="attr">value</span>=<span class="string">"smtp.qq.com"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>EmailHelper.cs文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Net.Mail;</span><br><span class="line">using static System.Configuration.ConfigurationManager;</span><br><span class="line"></span><br><span class="line">namespace View_Spot_of_City.UIControls.Helper</span><br><span class="line">&#123;</span><br><span class="line">    public static class EmailHelper</span><br><span class="line">    &#123;</span><br><span class="line">        public static bool SendEmail(string mail, string title, string content)</span><br><span class="line">        &#123;</span><br><span class="line">            MailMessage message = new MailMessage();</span><br><span class="line">            &#123;</span><br><span class="line">                message.To.Add(mail);</span><br><span class="line">                message.From = new MailAddress(AppSettings[&quot;MANAGER_MAIL_NUM&quot;], AppSettings[&quot;MANAGER_MAIL_NAME&quot;], Encoding.UTF8);</span><br><span class="line">                message.Subject =title;</span><br><span class="line">                message.SubjectEncoding = Encoding.UTF8;</span><br><span class="line">                message.Body = content;</span><br><span class="line">                message.BodyEncoding = Encoding.UTF8;</span><br><span class="line">                message.IsBodyHtml = false;</span><br><span class="line">                message.Priority = MailPriority.Normal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SmtpClient smtp = new SmtpClient();</span><br><span class="line">            &#123;</span><br><span class="line">                smtp.Host = AppSettings[&quot;SmtpClient_HOST&quot;];</span><br><span class="line">                smtp.EnableSsl = true;</span><br><span class="line">                smtp.UseDefaultCredentials = false;</span><br><span class="line">                smtp.Credentials = new System.Net.NetworkCredential(AppSettings[&quot;MANAGER_MAIL_NUM&quot;], AppSettings[&quot;MANAGER_MAIL_PASSWORD&quot;]);</span><br><span class="line">            &#125;</span><br><span class="line">            object userState = message;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                smtp.SendAsync(message, userState);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            catch(Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(ex.Message);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>若使用QQ邮箱，输入密码为许可码，需要在QQ邮箱中打开SMTP服务</p><ul><li>打开QQ邮箱网页版</li><li>点击左上角“设置”，并在导航栏中点击账户标签</li><li>开启SMTP服务并获得许可码<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/WpfSendMail.png" alt="开启SMTP服务"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 解决C#-WPF桌面软件发送电子邮件失败的问题&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    C#发送邮件的方法在网上搜一下可以找到很多，几个小时过去了还是没能实现，对比了很多人写的博客，笔者最终找到了问题所在，并在此记录。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WPF自定义消息框</title>
    <link href="https://cs-tao.github.io/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/WPF%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E6%A1%86/"/>
    <id>https://cs-tao.github.io/软件开发/WPF自定义消息框/</id>
    <published>2017-10-18T00:19:17.000Z</published>
    <updated>2017-12-26T14:46:13.884Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 一个更改按钮显示语言的的WPF消息框</strong> <excerpt in="" index="" |="" 首页摘要=""><br>消息框采用Material风格，支持中英切换，支持的返回值有Ok、Cancel、Yes、No，代码已托管并发布至<a href="https://github.com/CS-Tao/MyMessageBox/releases/tag/v1.0" target="_blank" rel="noopener">Github</a><br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><ul><li>带OK按钮的消息框</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OK1.png" alt="带OK按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OK2.png" alt="带OK按钮的消息框"></p><ul><li>带OK和取Cancel按钮的消息框</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OKCancel1.png" alt="带OK和取Cancel按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_OKCancel2.png" alt="带OK和取Cancel按钮的消息框"></p><ul><li>带Yes和No按钮的消息框</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNo1.png" alt="带Yes和No按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNo2.png" alt="带Yes和No按钮的消息框"></p><ul><li>带Yes、No和Cancel按钮的消息框</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNoCancel1.png" alt="带Yes、No和Cancel按钮的消息框"><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MyMessageBox_YesNoCancel2.png" alt="带Yes、No和Cancel按钮的消息框"></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><ul><li>引用本消息框所在程序集。</li><li>在App.xaml文件中添加：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">"pack://application:,,,/CSTao.MessageBox;component/Resources.xaml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如下：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/MyMessagebox/MessageBoxResoureCode.png" alt="添加资源字典"></p><h2 id="使用MessageBox"><a href="#使用MessageBox" class="headerlink" title="使用MessageBox"></a>使用MessageBox</h2><ul><li>在程序中需要使用的地方添加命名空间：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">using CSTao.MessageBox;</span><br></pre></td></tr></table></figure><ul><li>调用MessageboxMaster.Show()函数，该函数有多个重载，请按您的需求使用。</li></ul><h2 id="使用语言切换"><a href="#使用语言切换" class="headerlink" title="使用语言切换"></a>使用语言切换</h2><ul><li>静态修改</li></ul><p>将<code>MyMessageBox\MyMessagebox\CSTao.MessageBox\Languages\LanguagesDictionary.xaml</code>中的<code>Language.CN.xaml</code>改为<code>Language.EN.xaml</code>即可。</p><ul><li>动态修改</li></ul><p>在您定义的修改语言的响应函数中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">string requestedCulture = string.Format(@&quot;pack://application:,,,/CSTao.MessageBox;component/Languages/Language.&#123;0&#125;.xaml&quot;, languageDictionary[0或1]);</span><br><span class="line">ResourceDictionary resourceDictionary = Application.Current.Resources.MergedDictionaries.FirstOrDefault((x) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    return (x.Source == null) ? false : (x.Source.OriginalString.Contains(&quot;CSTao.MessageBox;component/Languages&quot;));</span><br><span class="line">&#125;);</span><br><span class="line">if (resourceDictionary != null)</span><br><span class="line">&#123;</span><br><span class="line">    Application.Current.Resources.MergedDictionaries.Remove(resourceDictionary);</span><br><span class="line">    ResourceDictionary requestDictionary = new ResourceDictionary()</span><br><span class="line">    &#123;</span><br><span class="line">        Source = new Uri(requestedCulture)</span><br><span class="line">    &#125;;</span><br><span class="line">    Application.Current.Resources.MergedDictionaries.Add(requestDictionary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>温馨提醒:</code>本方法是笔者用于全局改变软件语言的代码，不仅针对本消息框，慎用</p><h2 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h2><p>修改<code>MyMessageBox\MyMessagebox\CSTao.MessageBox\Resources.xaml</code>中<code>PrimaryHueBrush</code>键的值即可</p><h1 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h1><p>感谢<a href="https://hpdell.github.io/" target="_blank" rel="noopener">师兄</a>提供的代码参考。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 一个更改按钮显示语言的的WPF消息框&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;消息框采用Material风格，支持中英切换，支持的返回值有Ok、Cancel、Yes、No，代码已托管并发布至&lt;a href=&quot;https://github.com/CS-Tao/MyMessageBox/releases/tag/v1.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
  </entry>
  
  <entry>
    <title>关于带登录界面的WPF应用的问题</title>
    <link href="https://cs-tao.github.io/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%85%B3%E4%BA%8E%E5%B8%A6%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E7%9A%84WPF%E5%BA%94%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cs-tao.github.io/软件开发/关于带登录界面的WPF应用的问题/</id>
    <published>2017-10-11T15:24:18.000Z</published>
    <updated>2017-12-13T06:54:15.925Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 解决WPF关闭登录窗口后主窗口无法打开的问题</strong> <excerpt in="" index="" |="" 首页摘要=""><br>    笔者最近在开发一款<a href="https://github.com/CS-Tao/View-Spot-of-City" target="_blank" rel="noopener">WPF应用程序</a>的时候，发现在登录窗口关闭之后，主窗口无法打开，遂上网搜索了一下，找到了问题所在<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>笔者通过重载App类OnStartup()函数，在其中添加了启动登录框的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnStartup(StartupEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    //验证License</span><br><span class="line">    if (!RegisterMaster.CanStart())</span><br><span class="line">    &#123;</span><br><span class="line">        Environment.Exit(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //登录</span><br><span class="line">    bool? loginDlgResult = (new LoginDlg()).ShowDialog();</span><br><span class="line">    if (!loginDlgResult.HasValue || !loginDlgResult.Value)</span><br><span class="line">        Environment.Exit(0);</span><br><span class="line"></span><br><span class="line">    base.OnStartup(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>却发现登录窗口关闭后不能启动主窗口（也就是WPF自动生成的MainWindow类对应的窗口）。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将App的ShutdownMode属性改为OnExplicitShutdown即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected override void OnStartup(StartupEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    //应用程序关闭时，才System.Windows.Application.Shutdown调用</span><br><span class="line">    this.ShutdownMode = ShutdownMode.OnExplicitShutdown;</span><br><span class="line"></span><br><span class="line">    //验证License</span><br><span class="line">    if (!RegisterMaster.CanStart())</span><br><span class="line">    &#123;</span><br><span class="line">        Environment.Exit(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //登录</span><br><span class="line">    bool? loginDlgResult = (new LoginDlg()).ShowDialog();</span><br><span class="line">    if (!loginDlgResult.HasValue || !loginDlgResult.Value)</span><br><span class="line">        Environment.Exit(0);</span><br><span class="line"></span><br><span class="line">    base.OnStartup(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>需要关闭应用程序时需要显示调用System.Windows.Application.Shutdown()函数，或其他退出程序的函数。</p><h1 id="出现问题的原因"><a href="#出现问题的原因" class="headerlink" title="出现问题的原因"></a>出现问题的原因</h1><p>由上我们可以看出问题的根源就是App的ShutdownMode属性，那么这个属性有什么意义呢？<br><br>我们可以很容易地知道ShutdownMode是一个枚举属性，其可能得取值有三个，分别是OnLastWindowClose、OnMainWindowClose、OnExplicitShutdown。<br>进一步探索笔者发现ShutdownMode属性的默认值为OnLastWindowClose，也就是WPF会在最后一个窗口关闭时隐式调用Application的Shutdown()函数，对此MSDN中有提到：<a href="https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.shutdownmode(v=vs.100).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.shutdownmode(v=vs.100).aspx</a><br></p><blockquote><p>如果将 ShutdownMode 设置为 OnLastWindowClose，则 Windows Presentation Foundation (WPF) 会在应用程序中的最后一个窗口关闭时隐式调用 Shutdown，即使任何当前已经实例化的窗口被设置为主窗口也是如此。请参见 <a href="https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.mainwindow(v=vs.100).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/subscriptions/system.windows.application.mainwindow(v=vs.100).aspx</a></p></blockquote><p>WPF会把第一个在AppDomain中实例化的第一个Window对象的引用，自动设置为应用程序的主窗口，也就是说当登录框实例化的时候，就被设置为主窗口了。且当登录窗口关闭时，没有任何其他的窗口处于显示状态，满足<code>OnLastWindowClose</code>的退出条件，WPF会隐式调用ShutDown()，以至于真正的主窗口无法显示。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 解决WPF关闭登录窗口后主窗口无法打开的问题&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    笔者最近在开发一款&lt;a href=&quot;https://github.com/CS-Tao/View-Spot-of-City&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WPF应用程序&lt;/a&gt;的时候，发现在登录窗口关闭之后，主窗口无法打开，遂上网搜索了一下，找到了问题所在&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
  </entry>
  
  <entry>
    <title>Android工具包-xUtils基本使用</title>
    <link href="https://cs-tao.github.io/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Android%E5%B7%A5%E5%85%B7%E5%8C%85-xUtils%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://cs-tao.github.io/软件开发/Android工具包-xUtils基本使用/</id>
    <published>2017-09-21T02:34:33.000Z</published>
    <updated>2017-12-13T06:53:50.135Z</updated>
    
    <content type="html"><![CDATA[<p><strong> xUtils基本使用 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    本文转自<a href="http://www.oschina.net/p/xutils?fromerr=FllYBeuf" title="查看原文" target="_blank" rel="noopener">开源中国</a>，因为原文的markdown格式出于某种原因未渲染，笔者将其转到了自己博客，方便查看<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="xUtils3简介"><a href="#xUtils3简介" class="headerlink" title="xUtils3简介"></a>xUtils3简介</h2><ul><li>xUtils 包含了orm, http(s), image, view注解, 但依然很轻量级(246K), 并且特性强大, 方便扩展:<ul><li><code>稳定的基石</code>: <code>AbsTask</code>和统一的回调接口<code>Callback</code>, 任何异常, 即使你的回调方法实现有异常都会进入<code>onError</code>, 任何情况下<code>onFinished</code>总会让你知道任务结束了.</li><li>基于高效稳定的<code>orm</code>工具, <code>http</code>模块得以更方便的实现cookie(支持domain, path, expiry等特性)和<br>缓存(支持Cache-Control, Last-Modified, ETag等特性)的支持.</li><li>有了强大的<code>http</code>及其下载缓存的支持, <code>image</code>模块的实现相当的简洁, 并且支持回收被view持有, 但被Mem Cache移除的图片, 减少页面回退时的闪烁..</li><li><code>view</code>注解模块仅仅400多行代码却灵活的支持了各种View注入和事件绑定, 包括拥有多了方法的listener的支持.</li></ul></li></ul><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><ul><li>支持超大文件(超过2G)上传</li><li>更全面的http请求协议支持(11种谓词)</li><li>拥有更加灵活的ORM, 和greenDao一致的性能</li><li>更多的事件注解支持且不受混淆影响…</li><li>图片绑定支持gif(受系统兼容性影响, 部分gif文件只能静态显示), webp; 支持圆角, 圆形, 方形等裁剪, 支持自动旋转…</li><li>从3.5.0开始不再包含libwebpbackport.so, 需要在Android4.2以下设备兼容webp的请使用3.4.0版本.</li></ul><h4 id="使用Gradle构建时添加一下依赖即可"><a href="#使用Gradle构建时添加一下依赖即可" class="headerlink" title="使用Gradle构建时添加一下依赖即可:"></a>使用Gradle构建时添加一下依赖即可:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.xutils:xutils:3.5.0'</span></span><br></pre></td></tr></table></figure><h5 id="如果使用eclipse可以-点击这里下载aar文件-然后用zip解压-取出jar文件"><a href="#如果使用eclipse可以-点击这里下载aar文件-然后用zip解压-取出jar文件" class="headerlink" title="如果使用eclipse可以 点击这里下载aar文件, 然后用zip解压, 取出jar文件."></a>如果使用eclipse可以 <a href="http://dl.bintray.com/wyouflf/maven/org/xutils/xutils/" target="_blank" rel="noopener">点击这里下载aar文件</a>, 然后用zip解压, 取出jar文件.</h5><h5 id="混淆配置参考示例项目sample的配置"><a href="#混淆配置参考示例项目sample的配置" class="headerlink" title="混淆配置参考示例项目sample的配置"></a>混淆配置参考示例项目sample的配置</h5><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题:"></a>常见问题:</h4><ol><li>更好的管理图片缓存: <a href="https://github.com/wyouflf/xUtils3/issues/149" target="_blank" rel="noopener">https://github.com/wyouflf/xUtils3/issues/149</a></li><li>Cookie的使用: <a href="https://github.com/wyouflf/xUtils3/issues/125" target="_blank" rel="noopener">https://github.com/wyouflf/xUtils3/issues/125</a></li><li>关于query参数? http请求可以通过 header, url, body(请求体)传参; query参数是url中问号(?)后面的参数.</li><li>关于body参数? body参数只有PUT, POST, PATCH, DELETE(老版本RFC2616文档没有明确指出它是否支持, 所以暂时支持)请求支持.</li><li>自定义Http参数对象和结果解析: <a href="https://github.com/wyouflf/xUtils3/issues/191" target="_blank" rel="noopener">https://github.com/wyouflf/xUtils3/issues/191</a></li></ol><h4 id="使用前配置"><a href="#使用前配置" class="headerlink" title="使用前配置"></a>使用前配置</h4><h5 id="需要的权限"><a href="#需要的权限" class="headerlink" title="需要的权限"></a>需要的权限</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在application的onCreate中初始化</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    x.Ext.init(<span class="keyword">this</span>);</span><br><span class="line">    x.Ext.setDebug(BuildConfig.DEBUG); <span class="comment">// 是否输出debug日志, 开启debug会影响性能.</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Event事件注解-ContentView-ViewInject等更多示例参考sample项目"><a href="#使用-Event事件注解-ContentView-ViewInject等更多示例参考sample项目" class="headerlink" title="使用@Event事件注解(@ContentView, @ViewInject等更多示例参考sample项目)"></a>使用@Event事件注解(@ContentView, @ViewInject等更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 方法必须私有限定,</span></span><br><span class="line"><span class="comment"> * 2. 方法参数形式必须和type对应的Listener接口一致.</span></span><br><span class="line"><span class="comment"> * 3. 注解参数value支持数组: value=&#123;id1, id2, id3&#125;</span></span><br><span class="line"><span class="comment"> * 4. 其它参数说明见&#123;<span class="doctag">@link</span> org.xutils.event.annotation.Event&#125;类的说明.</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Event</span>(value = R.id.btn_test_baidu1,</span><br><span class="line">        type = View.OnClickListener.class<span class="comment">/*可选参数, 默认是View.OnClickListener.class*/</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTestBaidu1Click</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问网络-更多示例参考sample项目"><a href="#访问网络-更多示例参考sample项目" class="headerlink" title="访问网络(更多示例参考sample项目)"></a>访问网络(更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实体参数类请参考:</span></span><br><span class="line"><span class="comment"> * 请求注解 &#123;<span class="doctag">@link</span> org.xutils.http.annotation.HttpRequest&#125;</span></span><br><span class="line"><span class="comment"> * 请求注解处理模板接口 &#123;<span class="doctag">@link</span> org.xutils.http.app.ParamsBuilder&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要自定义类型作为callback的泛型时, 参考:</span></span><br><span class="line"><span class="comment"> * 响应注解 &#123;<span class="doctag">@link</span> org.xutils.http.annotation.HttpResponse&#125;</span></span><br><span class="line"><span class="comment"> * 响应注解处理模板接口 &#123;<span class="doctag">@link</span> org.xutils.http.app.ResponseParser&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 示例: 查看 org.xutils.sample.http 包里的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BaiduParams params = <span class="keyword">new</span> BaiduParams();</span><br><span class="line">params.wd = <span class="string">"xUtils"</span>;</span><br><span class="line"><span class="comment">// 有上传文件时使用multipart表单, 否则上传原始文件流.</span></span><br><span class="line"><span class="comment">// params.setMultipart(true);</span></span><br><span class="line"><span class="comment">// 上传文件方式 1</span></span><br><span class="line"><span class="comment">// params.uploadFile = new File("/sdcard/test.txt");</span></span><br><span class="line"><span class="comment">// 上传文件方式 2</span></span><br><span class="line"><span class="comment">// params.addBodyParameter("uploadFile", new File("/sdcard/test.txt"));</span></span><br><span class="line">Callback.Cancelable cancelable</span><br><span class="line">       = x.http().get(params,</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 1. callback的泛型:</span></span><br><span class="line"><span class="comment">        * callback参数默认支持的泛型类型参见&#123;<span class="doctag">@link</span> org.xutils.http.loader.LoaderFactory&#125;,</span></span><br><span class="line"><span class="comment">        * 例如: 指定泛型为File则可实现文件下载, 使用params.setSaveFilePath(path)指定文件保存的全路径.</span></span><br><span class="line"><span class="comment">        * 默认支持断点续传(采用了文件锁和尾端校验续传文件的一致性).</span></span><br><span class="line"><span class="comment">        * 其他常用类型可以自己在LoaderFactory中注册,</span></span><br><span class="line"><span class="comment">        * 也可以使用&#123;<span class="doctag">@link</span> org.xutils.http.annotation.HttpResponse&#125;</span></span><br><span class="line"><span class="comment">        * 将注解HttpResponse加到自定义返回值类型上, 实现自定义ResponseParser接口来统一转换.</span></span><br><span class="line"><span class="comment">        * 如果返回值是json形式, 那么利用第三方的json工具将十分容易定义自己的ResponseParser.</span></span><br><span class="line"><span class="comment">        * 如示例代码&#123;<span class="doctag">@link</span> org.xutils.sample.http.BaiduResponse&#125;, 可直接使用BaiduResponse作为</span></span><br><span class="line"><span class="comment">        * callback的泛型.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 2. callback的组合:</span></span><br><span class="line"><span class="comment">        * 可以用基类或接口组合个种类的Callback, 见&#123;<span class="doctag">@link</span> org.xutils.common.Callback&#125;.</span></span><br><span class="line"><span class="comment">        * 例如:</span></span><br><span class="line"><span class="comment">        * a. 组合使用CacheCallback将使请求检测缓存或将结果存入缓存(仅GET请求生效).</span></span><br><span class="line"><span class="comment">        * b. 组合使用PrepareCallback的prepare方法将为callback提供一次后台执行耗时任务的机会,</span></span><br><span class="line"><span class="comment">        * 然后将结果给onCache或onSuccess.</span></span><br><span class="line"><span class="comment">        * c. 组合使用ProgressCallback将提供进度回调.</span></span><br><span class="line"><span class="comment">        * ...(可参考&#123;<span class="doctag">@link</span> org.xutils.image.ImageLoader&#125;</span></span><br><span class="line"><span class="comment">        * 或 示例代码中的 &#123;<span class="doctag">@link</span> org.xutils.sample.download.DownloadCallback&#125;)</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 3. 请求过程拦截或记录日志: 参考 &#123;<span class="doctag">@link</span> org.xutils.http.app.RequestTracker&#125;</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 4. 请求Header获取: 参考 &#123;<span class="doctag">@link</span> org.xutils.http.app.RequestInterceptListener&#125;</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 5. 其他(线程池, 超时, 重定向, 重试, 代理等): 参考 &#123;<span class="doctag">@link</span> org.xutils.http.RequestParams&#125;</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">       <span class="keyword">new</span> Callback.CommonCallback() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">               Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable ex, <span class="keyword">boolean</span> isOnCallback)</span> </span>&#123;</span><br><span class="line">               <span class="comment">//Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</span></span><br><span class="line">               <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> HttpException) &#123; <span class="comment">// 网络错误</span></span><br><span class="line">                   HttpException httpEx = (HttpException) ex;</span><br><span class="line">                   <span class="keyword">int</span> responseCode = httpEx.getCode();</span><br><span class="line">                   String responseMsg = httpEx.getMessage();</span><br><span class="line">                   String errorResult = httpEx.getResult();</span><br><span class="line">                   <span class="comment">// ...</span></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他错误</span></span><br><span class="line">                   <span class="comment">// ...</span></span><br><span class="line">               &#125;</span><br><span class="line">               Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(CancelledException cex)</span> </span>&#123;</span><br><span class="line">               Toast.makeText(x.app(), <span class="string">"cancelled"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancelable.cancel(); // 取消请求</span></span><br></pre></td></tr></table></figure><h4 id="如果你只需要一个简单的版本"><a href="#如果你只需要一个简单的版本" class="headerlink" title="如果你只需要一个简单的版本:"></a>如果你只需要一个简单的版本:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Event</span>(value = R.id.btn_test_baidu2)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTestBaidu2Click</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    RequestParams params = <span class="keyword">new</span> RequestParams(<span class="string">"https://www.baidu.com/s"</span>);</span><br><span class="line">    params.setSslSocketFactory(...); <span class="comment">// 设置ssl</span></span><br><span class="line">    params.addQueryStringParameter(<span class="string">"wd"</span>, <span class="string">"xUtils"</span>);</span><br><span class="line">    x.http().get(params, <span class="keyword">new</span> Callback.CommonCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable ex, <span class="keyword">boolean</span> isOnCallback)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(CancelledException cex)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(x.app(), <span class="string">"cancelled"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h4 id="带有缓存的请求示例"><a href="#带有缓存的请求示例" class="headerlink" title="带有缓存的请求示例:"></a>带有缓存的请求示例:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaiduParams params = <span class="keyword">new</span> BaiduParams();</span><br><span class="line">params.wd = <span class="string">"xUtils"</span>;</span><br><span class="line"><span class="comment">// 默认缓存存活时间, 单位:毫秒.(如果服务没有返回有效的max-age或Expires)</span></span><br><span class="line">params.setCacheMaxAge(<span class="number">1000</span> * <span class="number">60</span>);</span><br><span class="line">Callback.Cancelable cancelable</span><br><span class="line">       <span class="comment">// 使用CacheCallback, xUtils将为该请求缓存数据.</span></span><br><span class="line">      = x.http().get(params, <span class="keyword">new</span> Callback.CacheCallback() &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasError = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">private</span> String result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCache</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 得到缓存数据, 缓存过期后不会进入这个方法.</span></span><br><span class="line">      <span class="comment">// 如果服务端没有返回过期时间, 参考params.setCacheMaxAge(maxAge)方法.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// * 客户端会根据服务端返回的 header 中 max-age 或 expires 来确定本地缓存是否给 onCache 方法.</span></span><br><span class="line">        <span class="comment">//   如果服务端没有返回 max-age 或 expires, 那么缓存将一直保存, 除非这里自己定义了返回false的</span></span><br><span class="line">        <span class="comment">//   逻辑, 那么xUtils将请求新数据, 来覆盖它.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// * 如果信任该缓存返回 true, 将不再请求网络;</span></span><br><span class="line">        <span class="comment">//   返回 false 继续请求网络, 但会在请求头中加上ETag, Last-Modified等信息,</span></span><br><span class="line">        <span class="comment">//   如果服务端返回304, 则表示数据没有更新, 不继续加载数据.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// true: 信任缓存数据, 不在发起网络请求; false不信任缓存数据.</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 注意: 如果服务返回304 或 onCache 选择了信任缓存, 这时result为null.</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.result = result;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable ex, <span class="keyword">boolean</span> isOnCallback)</span> </span>&#123;</span><br><span class="line">      hasError = <span class="keyword">true</span>;</span><br><span class="line">      Toast.makeText(x.app(), ex.getMessage(), Toast.LENGTH_LONG).show();</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> HttpException) &#123; <span class="comment">// 网络错误</span></span><br><span class="line">         HttpException httpEx = (HttpException) ex;</span><br><span class="line">         <span class="keyword">int</span> responseCode = httpEx.getCode();</span><br><span class="line">         String responseMsg = httpEx.getMessage();</span><br><span class="line">         String errorResult = httpEx.getResult();</span><br><span class="line">         <span class="comment">// ...</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他错误</span></span><br><span class="line">         <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(CancelledException cex)</span> </span>&#123;</span><br><span class="line">      Toast.makeText(x.app(), <span class="string">"cancelled"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!hasError &amp;&amp; result != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 成功获取数据</span></span><br><span class="line">         Toast.makeText(x.app(), result, Toast.LENGTH_LONG).show();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用数据库-更多示例参考sample项目"><a href="#使用数据库-更多示例参考sample项目" class="headerlink" title="使用数据库(更多示例参考sample项目)"></a>使用数据库(更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parent test = db.selector(Parent.class).where(<span class="string">"id"</span>, <span class="string">"in"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>&#125;).findFirst();</span><br><span class="line"><span class="keyword">long</span> count = db.selector(Parent.class).where(<span class="string">"name"</span>, <span class="string">"LIKE"</span>, <span class="string">"w%"</span>).and(<span class="string">"age"</span>, <span class="string">"&gt;"</span>, <span class="number">32</span>).count();</span><br><span class="line">List testList = db.selector(Parent.class).where(<span class="string">"id"</span>, <span class="string">"between"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>, <span class="string">"5"</span>&#125;).findAll();</span><br></pre></td></tr></table></figure><h3 id="绑定图片-更多示例参考sample项目"><a href="#绑定图片-更多示例参考sample项目" class="headerlink" title="绑定图片(更多示例参考sample项目)"></a>绑定图片(更多示例参考sample项目)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x.image().bind(imageView, url, imageOptions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// assets file</span></span><br><span class="line">x.image().bind(imageView, <span class="string">"assets://test.gif"</span>, imageOptions);</span><br><span class="line"></span><br><span class="line"><span class="comment">// local file</span></span><br><span class="line">x.image().bind(imageView, <span class="keyword">new</span> File(<span class="string">"/sdcard/test.gif"</span>).toURI().toString(), imageOptions);</span><br><span class="line">x.image().bind(imageView, <span class="string">"/sdcard/test.gif"</span>, imageOptions);</span><br><span class="line">x.image().bind(imageView, <span class="string">"file:///sdcard/test.gif"</span>, imageOptions);</span><br><span class="line">x.image().bind(imageView, <span class="string">"file:/sdcard/test.gif"</span>, imageOptions);</span><br><span class="line"></span><br><span class="line">x.image().bind(imageView, url, imageOptions, <span class="keyword">new</span> Callback.CommonCallback() &#123;...&#125;);</span><br><span class="line">x.image().loadDrawable(url, imageOptions, <span class="keyword">new</span> Callback.CommonCallback() &#123;...&#125;);</span><br><span class="line"><span class="comment">// 用来获取缓存文件</span></span><br><span class="line">x.image().loadFile(url, imageOptions, <span class="keyword">new</span> Callback.CommonCallback() &#123;...&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h3><ul><li>Email： , </li><li>有任何建议或者使用中遇到问题都可以给我发邮件, 你也可以加入QQ群：330445659(已满), 275967695, 257323060,<br>384426013, 176778777, 169852490, 261053948, 330108003, 技术交流，idea分享 <em>_</em></li></ul></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; xUtils基本使用 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    本文转自&lt;a href=&quot;http://www.oschina.net/p/xutils?fromerr=FllYBeuf&quot; title=&quot;查看原文&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源中国&lt;/a&gt;，因为原文的markdown格式出于某种原因未渲染，笔者将其转到了自己博客，方便查看&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://cs-tao.github.io/tags/Android/"/>
    
      <category term="xUtils" scheme="https://cs-tao.github.io/tags/xUtils/"/>
    
  </entry>
  
  <entry>
    <title>Js利用百度地图API进行坐标转换</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/Js%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6API%E8%BF%9B%E8%A1%8C%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    <id>https://cs-tao.github.io/技术相关/Js利用百度API进行坐标转换/</id>
    <published>2017-09-04T13:10:59.000Z</published>
    <updated>2018-01-16T10:46:47.906Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 百度地图API for JavaScript的使用 </strong><excerpt in="" index="" |="" 首页摘要=""><br>在Js中利用百度地图API对地理坐标系和投影坐标系（墨卡托）进行互转<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="导入js文件"><a href="#导入js文件" class="headerlink" title="导入js文件"></a>导入js文件</h1><p>在html文件中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://api.map.baidu.com/api?v=1.2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="地理坐标转为平面坐标"><a href="#地理坐标转为平面坐标" class="headerlink" title="地理坐标转为平面坐标"></a>地理坐标转为平面坐标</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> BMap.MercatorProjection();</span><br><span class="line"><span class="keyword">var</span> mercatorPoint = projection.lngLatToPoint(<span class="keyword">new</span> BMap.Point(<span class="number">114.3908</span>, <span class="number">30.4879</span>));</span><br><span class="line">alert(<span class="string">"x = "</span> + mercatorPoint.x + <span class="string">", y = "</span> + mercatorPoint.y);</span><br></pre></td></tr></table></figure><h1 id="平面坐标转为地理坐标"><a href="#平面坐标转为地理坐标" class="headerlink" title="平面坐标转为地理坐标"></a>平面坐标转为地理坐标</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> BMap.MercatorProjection();</span><br><span class="line"><span class="keyword">var</span> lngLat = projection.pointToLngLat(<span class="keyword">new</span> BMap.Pixel(<span class="number">12734064.16</span>, <span class="number">3544542.8</span>));</span><br><span class="line">alert(<span class="string">"lng = "</span> + lngLat.lng + <span class="string">", lat = "</span> + lngLat.lat);</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 百度地图API for JavaScript的使用 &lt;/strong&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;在Js中利用百度地图API对地理坐标系和投影坐标系（墨卡托）进行互转&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="JacaScript" scheme="https://cs-tao.github.io/tags/JacaScript/"/>
    
  </entry>
  
  <entry>
    <title>夜跑助手App-路径规划的实现</title>
    <link href="https://cs-tao.github.io/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%A4%9C%E8%B7%91%E5%8A%A9%E6%89%8BApp-%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://cs-tao.github.io/软件开发/夜跑助手App-路径规划的实现/</id>
    <published>2017-09-03T08:34:55.000Z</published>
    <updated>2018-01-06T11:54:26.408Z</updated>
    
    <content type="html"><![CDATA[<p><strong> <a href="https://github.com/CS-Tao/Route-NightRun" target="_blank" rel="noopener">夜跑助手App</a>路径规划的实现 </strong> <excerpt in="" index="" |="" 首页摘要=""><br>    夜跑助手App是笔者参加某数据生产公司的地图制图大赛的成果之一，这里对其中的夜跑路径规划的方式进行记录。<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="按站点进行路径规划"><a href="#按站点进行路径规划" class="headerlink" title="按站点进行路径规划"></a>按站点进行路径规划</h1><h2 id="原理和方法"><a href="#原理和方法" class="headerlink" title="原理和方法"></a>原理和方法</h2><p>按站点进行路径规划的方式主要是利用<a href="https://www.graphhopper.com/" target="_blank" rel="noopener">GraphHopper</a>提供的WebAPI进行路径规划，通过对Rest接口发送Get请求获取json数据，如<a href="https://graphhopper.com/api/1/route?point=49.932707,11.588051&amp;point=50.3404,11.64705&amp;vehicle=car&amp;debug=false&amp;key=f8821850-c1f8-4f8f-befb-f976c887ebfb&amp;optimize=true" target="_blank" rel="noopener">示例</a>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>通过用户在手机屏幕上的双击操作获得用户希望经过的站点并进行标记</li><li>在用户指定的站点链表的首位加上用户位置</li><li>将上一步产生的站点列表投影为地理坐标</li><li>生成http请求</li><li>得到返回的json数据</li><li>解析数据，此时便可得到路径信息</li><li>将路径显示到屏幕上</li><li>同时计算路径附近两百米形成的地理坐标框，发送http请求到我们自己的服务器</li><li>得到饮品店信息并进行显示</li></ul><p>流程图如下：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92.png" alt="流程图"></p><p>效果图如下：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E8%A7%84%E5%88%92%E8%B7%AF%E5%BE%841.jpg" alt="App截屏"></p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E7%AB%99%E7%82%B9%E8%A7%84%E5%88%92%E8%B7%AF%E5%BE%842.jpg" alt="App截屏"></p><h1 id="按路径长度进行路径规划"><a href="#按路径长度进行路径规划" class="headerlink" title="按路径长度进行路径规划"></a>按路径长度进行路径规划</h1><h2 id="原理和方法-1"><a href="#原理和方法-1" class="headerlink" title="原理和方法"></a>原理和方法</h2><p>按路径长度进行路径规划相比于按站点的路径规划显得更加复杂，需要预定若干站点，并对符合预定要求的站点依次利用GraphHopper的Rest接口计算最短距离，接着得到与指定路径长度的一半最接近的距离和其对应的站点，最后通过GraphHopper得到最短路径。</p><h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><p><code>注意：</code>夜跑区域的站点数据，由App维护人员通过其他软件采集并上传到数据库，软件已托管至<a href="https://github.com/CS-Tao/DataAcquisitionForNightRunning" target="_blank" rel="noopener">Github</a>。</p><ul><li>用户输入路径长度，设为a</li><li>得到以用户为中心周围a/4到a/2区域内的所有站点</li><li>依次利用GraphHopper的最短路径接口发送http请求，并获得用户位置到上一步所有站点的路径距离</li><li>将这些距离值与与a/2比较，得到与a/2最接近的距离，并记录其对应的站点</li><li>通过发送http请求获得用户位置到该站点的最短路径</li><li>解析数据并显示路径</li><li>显示附近的饮品店，和之前的方式一样，在此不详述</li></ul><p>流程图如下：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92.png" alt="流程图"></p><p>效果图如下：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%921.png" alt="App截屏"></p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/%E6%8C%89%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E8%BF%9B%E8%A1%8C%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%922.png" alt="App截屏"></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>按指定站点进行路径规划得到的是环形回路，按指定路径长度得到的是一条供往返的线路。笔者思考了很久，最终采用了如上文叙述的方法进行按路径长度规划路径，如果您有更好的方法，无论是算法还是工具，希望您能在评论中指出，共同进步，非常感谢。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; &lt;a href=&quot;https://github.com/CS-Tao/Route-NightRun&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;夜跑助手App&lt;/a&gt;路径规划的实现 &lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    夜跑助手App是笔者参加某数据生产公司的地图制图大赛的成果之一，这里对其中的夜跑路径规划的方式进行记录。&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="https://cs-tao.github.io/tags/Android/"/>
    
      <category term="WebAPI" scheme="https://cs-tao.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu系统下的PostgreSQL安装和配置</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84PostgreSQL%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://cs-tao.github.io/技术相关/Ubuntu系统下的PostgreSQL安装和配置/</id>
    <published>2017-09-02T15:20:58.000Z</published>
    <updated>2018-01-16T10:46:47.906Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Ubuntu 16.04系统下的PostgreSQL 9.6安装和配置的详细步骤</strong> <excerpt in="" index="" |="" 首页摘要=""><br>PostgreSQL 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在 BSD-风格许可证下发行<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="PostgreSQL介绍"><a href="#PostgreSQL介绍" class="headerlink" title="PostgreSQL介绍"></a>PostgreSQL介绍</h1><p><a href="https://www.postgresql.org/" target="_blank" rel="noopener">PostgreSQL</a>是以加州大学伯克利分校计算机系开发的 POSTGRES，现在已经更名为PostgreSQL，版本 4.2为基础的对象关系型数据库管理系统（ORDBMS），开发语言为C/C++。PostgreSQL支持大部分 SQL标准并且提供了许多其他现代特性：复杂查询、外键、触发器、视图、事务完整性、MVCC。同样，PostgreSQL 可以用许多方法扩展，比如， 通过增加新的数据类型、函数、操作符、聚集函数、索引。免费使用、修改、和分发 PostgreSQL，不管是私用、商用、还是学术研究使用。</p><h1 id="PostgresSQL安装"><a href="#PostgresSQL安装" class="headerlink" title="PostgresSQL安装"></a>PostgresSQL安装</h1><ul><li><p>添加apt-repository</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">"deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main"</span></span><br></pre></td></tr></table></figure></li><li><p>载入apt-repository的签名</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>更新package列表</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>通过apt-get工具安装PostgreSQL</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install postgresql-9.6</span><br></pre></td></tr></table></figure></li></ul><h1 id="配置PostgreSQL"><a href="#配置PostgreSQL" class="headerlink" title="配置PostgreSQL"></a>配置PostgreSQL</h1><ul><li><p>切换到postgres用户</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su postgres</span><br></pre></td></tr></table></figure></li><li><p>登录到postgresql</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql postgres</span><br></pre></td></tr></table></figure><p>  如果看到如下页面则说明之前的努力没有白费，已经安装成功了。<br><br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/PostgreSQL%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="Putty截图"></p></li><li><p>更改用户密码<br>  在当前界面下输入</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\password</span><br></pre></td></tr></table></figure><p>  输入你想设置的PostgreSQL密码。输入\q回车退出。</p></li><li><p>设置连接权限</p><ul><li><p>打开配置文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/postgresql/9.1/main/postgresql.conf</span><br></pre></td></tr></table></figure></li><li><p>修改连接权限为所有主机</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#listen_addresses = ‘localhost’改为 listen_addresses = ‘*’</span></span><br></pre></td></tr></table></figure><p>  <code>注意：</code>需要去掉#号</p></li><li><p>启用密码验证</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#password_encryption = on 改为 password_encryption = on</span></span><br></pre></td></tr></table></figure><p>  <code>注意：</code>需要去掉#号</p></li></ul></li><li><p>设置用户ip段</p><ul><li><p>打开配置文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/postgresql/9.1/main/pg_hba.conf</span><br></pre></td></tr></table></figure></li><li><p>在文件末尾添加如下内容</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host all all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure><p>  <code>注意：</code>0.0.0.0为地址段。0为掩码的二进制位，可取数值为0、8、16、24、32。md5为加密方式<br>  <code>示例：</code>192.168.0.0/16代表192.168.0.1 ~ 192.168.255.254</p></li></ul></li><li>重启PostgreSQL服务  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgres restart</span><br></pre></td></tr></table></figure></li></ul><h1 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h1><ul><li><p>本地登录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U postgres -h 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>远程登录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U postgres -h 远程IP地址</span><br></pre></td></tr></table></figure></li></ul></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Ubuntu 16.04系统下的PostgreSQL 9.6安装和配置的详细步骤&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;PostgreSQL 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在 BSD-风格许可证下发行&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="PostgreSQL" scheme="https://cs-tao.github.io/tags/PostgreSQL/"/>
    
      <category term="Ubuntu" scheme="https://cs-tao.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>GMap.net for WPF 使用心得</title>
    <link href="https://cs-tao.github.io/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/GMap.net-for-WPF-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://cs-tao.github.io/软件开发/GMap.net-for-WPF-使用心得/</id>
    <published>2017-08-19T08:42:23.000Z</published>
    <updated>2018-01-06T11:57:50.329Z</updated>
    
    <content type="html"><![CDATA[<p><strong> GMap.net for WPF</strong> <excerpt in="" index="" |="" 首页摘要=""><br>    利用GMap.net for WPF绘制点线面的方式以及未指定长宽的要素与其他要素间相对定位的方式<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="GMap-net概述"><a href="#GMap-net概述" class="headerlink" title="GMap.net概述"></a>GMap.net概述</h2><p><a href="https://greatmaps.codeplex.com/" title="进入GMap.NET的项目地址" target="_blank" rel="noopener">GMap.net</a>是一个强大、免费、跨平台、开源的.NET控件，它在WinForm和WPF环境中能够通过Google, Yahoo!, Bing, OpenStreetMap, ArcGIS, Pergo, SigPac等实现寻找路径、地理编码以及地图展示功能，并支持缓存和运行在Mobile环境中。<br>GMap.NET是一个开源的GEO地图定位和跟踪程序。就像谷歌地图、雅虎地图一样，可以自动计算两地的距离，定位经纬度，与Google地图不同的是，该项目是建立在WinForm框架或WPF框架基础上的。可以对地图放大缩小，进行城市标记等。</p><h2 id="GMap-net-for-WPF-绘制要素"><a href="#GMap-net-for-WPF-绘制要素" class="headerlink" title="GMap.net for WPF 绘制要素"></a>GMap.net for WPF 绘制要素</h2><p>因为现在正在利用GMap.net for WPF写一个项目，所以我对WPF版本的GMap.net更加熟悉，如有错误或不当之处，还望指出，共同进步！</p><ul><li><p>不同于Winform版本，WPF版本没有图层的概念，但用于显示要素的对象GMapMarker提供了Zindex属性，该属性值大的会遮盖属性值小的。所以大家可以利用Zindex对地理要素建立逻辑上的图层关联。</p></li><li><p>WinForm版本绘图可以直接在显示对象上设置图形的属性，如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GMapPolygon polygon = new GMapPolygon(pointList, &quot;Polygon&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    IsHitTestVisible = true;</span><br><span class="line">    Fill = new SolidBrush(Color.FromArgb(50, Color.Red));</span><br><span class="line">    Stroke = new Pen(Color.Blue, 2);</span><br><span class="line">&#125;</span><br><span class="line">overlay.Polygons.Add(polygon);</span><br></pre></td></tr></table></figure><p>  对于wpf版本的点对象，可以直接指定显示用户控件，如：<br></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GMapMarker marker = new GMapMarker(pointLatLng);</span><br><span class="line">&#123;</span><br><span class="line">    MyUserControl myUserControl = new MyUserControl()</span><br><span class="line">    marker.Shape = myUserControl;</span><br><span class="line">    marker.ZIndex = (int)LayerIndex.Point;</span><br><span class="line">    marker.Offset = new Point(-myUserControl.ActualWidth / 2, -myUserControl.ActualHeight / 2);</span><br><span class="line">&#125;</span><br><span class="line">mapControl.Markers.Add(marker);</span><br></pre></td></tr></table></figure><p>  其中MyUserControl可以重载自UserControl，并自定义显示内容。LayerIndex为自定义的枚举类型。mapControl重载自GMapControl。<br>  但是wpf版本的线的属性设置需要重载GMapControl的CreateRoutePath方法，面的属性设置需要重载CreatePolygonPath方法。为了不影响原函数的内容，我们可以参考GMapControl的源代码<a href="https://greatmaps.codeplex.com/SourceControl/latest#GMap.NET.WindowsPresentation/GMap.NET.WindowsPresentation/GMapControl.cs" title="查看源码文件" target="_blank" rel="noopener"><em>GMapControl.cs</em></a>文件。重载CreateRoutePath方法和CreatePolygonPath后的内容如下，只做了少量修改：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// creates path from list of points, for performance set addBlurEffect to false</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;pl&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public override Path CreateRoutePath(List&lt;Point&gt; localPath, bool addBlurEffect)</span><br><span class="line">&#123;</span><br><span class="line">    // Create a StreamGeometry to use to specify myPath.</span><br><span class="line">    StreamGeometry geometry = new StreamGeometry();</span><br><span class="line"></span><br><span class="line">    using (StreamGeometryContext ctx = geometry.Open())</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.BeginFigure(localPath[0], false, false);</span><br><span class="line"></span><br><span class="line">        // Draw a line to the next specified point.</span><br><span class="line">        ctx.PolyLineTo(localPath, true, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Freeze the geometry (make it unmodifiable)</span><br><span class="line">    // for additional performance benefits.</span><br><span class="line">    geometry.Freeze();</span><br><span class="line"></span><br><span class="line">    // Create a path to draw a geometry with.</span><br><span class="line">    Path myPath = new Path();</span><br><span class="line">    &#123;</span><br><span class="line">        // Specify the shape of the Path using the StreamGeometry.</span><br><span class="line">        myPath.Data = geometry;</span><br><span class="line"></span><br><span class="line">        if (addBlurEffect)</span><br><span class="line">        &#123;</span><br><span class="line">            BlurEffect ef = new BlurEffect();</span><br><span class="line">            &#123;</span><br><span class="line">                ef.KernelType = KernelType.Gaussian;</span><br><span class="line">                ef.Radius = 0.0;</span><br><span class="line">                ef.RenderingBias = RenderingBias.Performance;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            myPath.Effect = ef;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myPath.Stroke = lineBrush;</span><br><span class="line">        myPath.StrokeThickness = lineWidth;</span><br><span class="line">        myPath.StrokeLineJoin = PenLineJoin.Round;</span><br><span class="line">        myPath.StrokeStartLineCap = PenLineCap.Triangle;</span><br><span class="line">        myPath.StrokeEndLineCap = PenLineCap.Round;</span><br><span class="line"></span><br><span class="line">        myPath.Opacity = lineOpacity;</span><br><span class="line">        myPath.IsHitTestVisible = false;</span><br><span class="line">    &#125;</span><br><span class="line">    return myPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>注意:</code>代码中lineBrush、lineWidth、lineOpacity为重载GMapControl时新添的公共字段。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// creates path from list of points, for performance set addBlurEffect to false</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;pl&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public override Path CreatePolygonPath(List&lt;Point&gt; localPath, bool addBlurEffect)</span><br><span class="line">&#123;</span><br><span class="line">    // Create a StreamGeometry to use to specify myPath.</span><br><span class="line">    StreamGeometry geometry = new StreamGeometry();</span><br><span class="line"></span><br><span class="line">    using (StreamGeometryContext ctx = geometry.Open())</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.BeginFigure(localPath[0], true, true);</span><br><span class="line"></span><br><span class="line">        // Draw a line to the next specified point.</span><br><span class="line">        ctx.PolyLineTo(localPath, true, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Freeze the geometry (make it unmodifiable)</span><br><span class="line">    // for additional performance benefits.</span><br><span class="line">    geometry.Freeze();</span><br><span class="line"></span><br><span class="line">    // Create a path to draw a geometry with.</span><br><span class="line">    Path myPath = new Path();</span><br><span class="line">    &#123;</span><br><span class="line">        // Specify the shape of the Path using the StreamGeometry.</span><br><span class="line">        myPath.Data = geometry;</span><br><span class="line"></span><br><span class="line">        if (addBlurEffect)</span><br><span class="line">        &#123;</span><br><span class="line">            BlurEffect ef = new BlurEffect();</span><br><span class="line">            &#123;</span><br><span class="line">                ef.KernelType = KernelType.Gaussian;</span><br><span class="line">                ef.Radius = 0.0;</span><br><span class="line">                ef.RenderingBias = RenderingBias.Performance;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            myPath.Effect = ef;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myPath.Stroke = polygonStrokeBrush;</span><br><span class="line">        myPath.StrokeThickness = polygonThickness;</span><br><span class="line">        myPath.StrokeLineJoin = PenLineJoin.Miter;</span><br><span class="line">        myPath.StrokeStartLineCap = PenLineCap.Triangle;</span><br><span class="line">        myPath.StrokeEndLineCap = PenLineCap.Square;</span><br><span class="line"></span><br><span class="line">        myPath.Fill = polygonFillBush;</span><br><span class="line"></span><br><span class="line">        myPath.Opacity = polygonOpacity;</span><br><span class="line">        myPath.IsHitTestVisible = false;</span><br><span class="line">    &#125;</span><br><span class="line">    return myPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>注意:</code>代码中polygonStrokeBrush、polygonThickness、polygonFillBush、polygonOpacity为重载GMapControl时新添的公共字段。</p></li><li><p>wpf版本只能绘制Point、PolyLine、Polygon三种图形，绘制圆则需要借助多边形的绘制。示例如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void DrawCircle(PointLatLng center, double R)</span><br><span class="line">&#123;</span><br><span class="line">    double cartesianCenterX = double.MaxValue;</span><br><span class="line">    double cartesianCenterY = double.MaxValue;</span><br><span class="line">    double cartesianCenterZ = double.MaxValue;</span><br><span class="line"></span><br><span class="line">    mapControl.MapProvider.Projection.FromGeodeticToCartesian(center.Lat, center.Lng, 0, out cartesianCenterX, out cartesianCenterY, out cartesianCenterZ);//将圆心投影到笛卡尔坐标系</span><br><span class="line"></span><br><span class="line">    int pointCount = 200;//用于拟合圆的多边形顶点个数</span><br><span class="line"></span><br><span class="line">    List&lt;PointLatLng&gt; polygonPointList = new List&lt;PointLatLng&gt;(pointCount);//用于存放多边形顶点</span><br><span class="line"></span><br><span class="line">    double interval = 2 * Math.PI / pointCount;</span><br><span class="line">    for (double degree = 0; degree &lt; 2 * Math.PI; degree += interval)</span><br><span class="line">    &#123;</span><br><span class="line">        double tempX = cartesianCenterX + R * Math.Cos(degree);</span><br><span class="line">        double tempY = cartesianCenterY + R * Math.Sin(degree);</span><br><span class="line">        double tempLng = double.MaxValue;</span><br><span class="line">        double tempLat = double.MaxValue;</span><br><span class="line">        mapControl.MapProvider.Projection.FromCartesianTGeodetic(tempX, tempY, cartesianCenterZ, out tempLat, out tempLng);//投影到WGS84坐标系</span><br><span class="line">        polygonPointList.Add(new PointLatLng(tempLat, tempLng));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GMapPolygon circle = new GMapPolygon(polygonPointList);</span><br><span class="line">    &#123;</span><br><span class="line">        circle.ZIndex = (int)LayerIndex.Polygon;</span><br><span class="line">    &#125;</span><br><span class="line">    mapControl.Markers.Add(circle);//添加到地图</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  效果如下：<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Wpf-Draw-Circle.png" alt="软件截屏"><br><br>  因为投影问题，说好的圆变为了椭圆，如果想生成正圆，可以在程序中使用一些WebAPI服务替换GMap的投影服务，我们项目使用的是搭建在自己服务器上的的GeoServer服务。效果如下：<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/FGIS-Damage-Circle.png" alt="软件截屏"><br><br>  <code>备注：</code>两张图片截图自不同的程序。</p></li></ul><h2 id="未指定长宽的要素与其他要素间相对定位的方式"><a href="#未指定长宽的要素与其他要素间相对定位的方式" class="headerlink" title="未指定长宽的要素与其他要素间相对定位的方式"></a>未指定长宽的要素与其他要素间相对定位的方式</h2><p>在使用GMap添加要素的时候，遇到需要对要素添加Tooltip，但不能指定Tooltip的长宽，且该要素与Tooltip需要水平中心对其，试过很多办法都不能成功，因为wpf控件的ActualWidth和ActualHeight属性必须加载过一次才能有正确的属性值，也就是说如果根据长宽计算GMapMarker的偏移量，Tolltip在第一次显示的时候无法正确定位，经过探索，最终利用wpf控件的SizeChanged响应函数实现了该效果，如果您有其他方法实现，希望能在评论中指出。效果如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Tooltip.png" alt="软件截屏"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void AddIconWithTooltip(PointLatLng pll, Uri iconUri, string tooltip)</span><br><span class="line">&#123;</span><br><span class="line">    Guid id = Guid.NewGuid();</span><br><span class="line"></span><br><span class="line">    //添加tooltip显示窗口</span><br><span class="line">    GMapMarker tooltipViewer = new GMapMarker(pll);</span><br><span class="line">    &#123;</span><br><span class="line">        tooltipViewer.ZIndex = (int)LayerIndex.Point;</span><br><span class="line">        tooltipViewer.Tag = id;</span><br><span class="line">        TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);</span><br><span class="line">        tooltipViewer.Shape = content;</span><br><span class="line">        tooltipViewer.Shape.Visibility = Visibility.Hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    mapControl.Markers.Add(tooltipViewer);</span><br><span class="line"></span><br><span class="line">    UIElement shape = new MyIcon(new BitmapImage(iconUri), tooltipViewer);//构造函数：MyIcon(ImageSource image, GMapMarker iconTooltipViewer, double width = 22, double height = 22, bool showTipAlways = false)</span><br><span class="line"></span><br><span class="line">    GMapMarker iconMarker = new GMapMarker(pll);</span><br><span class="line">    &#123;</span><br><span class="line">        iconMarker.ZIndex = (int)layerIndex;</span><br><span class="line">        iconMarker.Offset = new Point(-11, -11);</span><br><span class="line">        iconMarker.Tag = id;</span><br><span class="line">        iconMarker.Shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line">    mapControl.Markers.Add(iconMarker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>代码中id的作用是用于GMapMarker间的逻辑关联，方便同时从MapControl中移除。<br><br>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);</span><br></pre></td></tr></table></figure><p>其中TooltipForMap类的SizeChanged函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void TooltipForMap_SizeChanged(object sender, SizeChangedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    _TooltipViewer.Offset = new Point(-ActualWidth / 2, -ActualHeight - 22);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>_TooltipViewer和传入构造函数的tooltipViewer为同一实例。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; GMap.net for WPF&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    利用GMap.net for WPF绘制点线面的方式以及未指定长宽的要素与其他要素间相对定位的方式&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Wpf" scheme="https://cs-tao.github.io/tags/Wpf/"/>
    
      <category term="GMap.net" scheme="https://cs-tao.github.io/tags/GMap-net/"/>
    
  </entry>
  
  <entry>
    <title>团队项目中Github的使用</title>
    <link href="https://cs-tao.github.io/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE%E4%B8%ADGithub%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://cs-tao.github.io/技术相关/团队项目中Github的使用/</id>
    <published>2017-08-18T16:39:07.000Z</published>
    <updated>2018-01-16T10:46:48.005Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 前几个月学习了Github的使用，希望我的经验能帮助到那些想要了解和学习Github的人</strong> <excerpt in="" index="" |="" 首页摘要=""><br>    本文将讲解团队项目中Github的基本使用，笔者的操作系统为Win10<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a>是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名GitHub。<br>gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。<a href="https://baike.baidu.com/item/github/10145341" target="_blank" rel="noopener">百度百科</a></p><h1 id="创建仓库并提交、推送文件到远程仓库"><a href="#创建仓库并提交、推送文件到远程仓库" class="headerlink" title="创建仓库并提交、推送文件到远程仓库"></a>创建仓库并提交、推送文件到远程仓库</h1><ul><li><p>在本地操作系统上安装<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>，这是<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载页面</a>，对于git的安装和配置，在此不做介绍。</p></li><li><p>登录<a href="https://github.com/" target="_blank" rel="noopener">Github</a>并点击”New repository”按钮，新建远程仓库。</p></li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/new.png" alt="新建远程仓库"></p><ul><li>进入新建仓库页面，填写仓库信息，点击”Create repository”按钮，完成远程仓库的创建。</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/create.png" alt="新建远程仓库"></p><ul><li>出现以下界面说明创建成功。</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/created.png" alt="新建远程仓库"><br><br><code>注意：</code>如果在上一个页面没有选择创建.gitignore、LICENSE、README.md等文件，可以之后添加。当前只有master分支（git的默认分支为master），您也可以点击上图中的”Branch:master”下拉按钮，新建分支。</p><ul><li><p>在本地新建文件夹，用于存放仓库，文件夹必须为空。在文件夹中按住Shift点击鼠标右键，点击”在此处打开命令窗口”，或直接点击鼠标右键点击”Git Bash Here”（如果没有该选项，则需找到git bash所在位置，启动bash，并导航进入本文件夹）。</p></li><li><p>键入下面的命令初始化本地仓库。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>为本地仓库添加远程仓库。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/CS-Tao/example.git</span><br></pre></td></tr></table></figure><p><code>注意：</code>该命令的格式为 “git remote add 远程仓库的别名（方便记忆和键入） 远程仓库的url”。</p><ul><li>拉取远程仓库并合并到本地仓库。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p><code>注意：</code>该命令的格式为 “git pull 远程仓库的别名（或url） 希望拉取的分支”。该命令会自动在本地仓库中创建master分支，另外，”git pull”命令相当于”git fetch”命令和”git merge”命令的集成，在此不再详述。</p><ul><li>这三个命令的效果如下。</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/first_pull.png" alt="建立本地仓库"></p><ul><li>假如您现在在本项目文件夹中新建了”NewFolder”文件夹，并在文件夹中添加了source.cpp文件，您可以依次执行以下命令将新建的文件提交到远程仓库。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add NewFolder/source.cpp</span><br><span class="line">git commit -m <span class="string">"Add source.cpp"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><code>注意：</code></p><pre><code>1. 无论是新建文件，还是对文件做了修改，都可以键入类似的命令提交并推送文件。2. 向库中添加文件的命令格式为，&quot;git add 文件或文件夹&quot;，不同文件或文件夹用空格隔开，添加文件夹时会把文件夹内部的所有文件一并添加。3. 在执行&quot;git commit -m &quot;这次提交做了什么&quot;&quot;时，git会自动检测文件是否为新建文件或是否做了修改，并将新建或修改的文件或文件夹提交到本地仓库。4. &quot;git push 远程仓库的别名（或url） 希望推送到的分支&quot;命令会将本地的提交推送到远程仓库。&lt;br&gt;</code></pre><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/first_push.png" alt="推送到远程"></p><ul><li>到此为止，本地仓库和远程仓库的视图如下。</li></ul><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/folder.png" alt="本地仓库"><br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/github_usage/github_addFile.png" alt="远程仓库"></p><h1 id="新建本地分支并推送到远程"><a href="#新建本地分支并推送到远程" class="headerlink" title="新建本地分支并推送到远程"></a>新建本地分支并推送到远程</h1><p>敬请期待</p><h1 id="fork团队组长的仓库并合并不同成员的提交"><a href="#fork团队组长的仓库并合并不同成员的提交" class="headerlink" title="fork团队组长的仓库并合并不同成员的提交"></a>fork团队组长的仓库并合并不同成员的提交</h1><p>敬请期待</p><h1 id="合并冲突的方法"><a href="#合并冲突的方法" class="headerlink" title="合并冲突的方法"></a>合并冲突的方法</h1><p>敬请期待</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 前几个月学习了Github的使用，希望我的经验能帮助到那些想要了解和学习Github的人&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;    本文将讲解团队项目中Github的基本使用，笔者的操作系统为Win10&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="github" scheme="https://cs-tao.github.io/tags/github/"/>
    
      <category term="git" scheme="https://cs-tao.github.io/tags/git/"/>
    
  </entry>
  
</feed>
